//get modal.json
//limit drag for hasManyThrough relation
(function() {
    
      Snap.plugin( function( Snap, Element, Paper, global ) {
    
        Element.prototype.limitDragHasMany = function( params ) {
                this.data('minx', params.minx ); this.data('miny', params.miny );
                this.data('ibb', this.getBBox() ); this.data('ot', this.transform().local );
                this.data('relateTo' , params.relateTo);this.data('relateFrom' , params.relateFrom);
                this.data('linkModel' , params.linkModel); var minHieght = this.data('linkModel').getBBox();
                this.data('lengthRel' , params.lengthRel) ;this.data('textLinkModel' , params.textLinkModel);
                this.data('lineFromMainModel' , params.lineFromMainModel);this.data('lineFromRelationModel' , params.lineFromRelationModel);
                this.data('maxx', params.maxx ); this.data('maxy', params.maxy );
                this.data('x', params.x );    this.data('y', params.y );
                this.data('arrowFromMainModel' , params.arrowFromMainModel);this.data('arrowFromRelationModel' , params.arrowFromRelationModel);
                this.data('createFormChkBox' , params.createFormChkBox) ; this.data('createFormTick' , params.createFormTick);
                this.data('textMainModel' , params.textMainModel); this.data('textRelationModel' , params.textRelationModel);                    
                this.data('tickLinkModelSelectBox'  , params.tickLinkModelSelectBox);this.data('crudOptionsLinkBox' , params.crudOptionsLinkBox);
                this.data('modelHeight' , minHieght.height);
                this.drag( limitMoveDragHasMany, limitStartDragHasMany,limitStopDragHasMany );
                return this;    
        };

        // this code is old and clunky now, and transform possibly in wrong order, so only use for simple cases
        function limitMoveDragHasMany( dx, dy ) {
                var tdx, tdy;
                var sInvMatrix = this.transform().globalMatrix.invert();
                sInvMatrix.e = sInvMatrix.f = 0; 
                tdx = sInvMatrix.x( dx,dy ); tdy = sInvMatrix.y( dx,dy );

                this.data('x', +this.data('ox') + tdx);
                this.data('y', +this.data('oy') + tdy);
                if( this.data('x') > this.data('maxx') - this.data('ibb').width  ) 
                        { this.data('x', this.data('maxx') - this.data('ibb').width  ) };
                if( this.data('y') > this.data('maxy') - this.data('ibb').height ) 
                        { this.data('y', this.data('maxy') - this.data('ibb').height ) };
                if( this.data('x') < this.data('minx') ) { this.data('x', this.data('minx') ) };
                if( this.data('y') < this.data('miny') ) { this.data('y', this.data('miny') ) };
                this.transform( this.data('ot') + "t" + [ this.data('x'), this.data('y') ]  );

                //check dragOver and dragOut...
                var relateTo_bbox = this.data("relateTo").getBBox();
                var relateFrom_bbox = this.data("relateFrom").getBBox();
                var linkModel_bbox = this.getBBox();

                if ((linkModel_bbox.y+20 < relateFrom_bbox.y2 && linkModel_bbox.x < relateFrom_bbox.x2- 15) || (linkModel_bbox.x2 > relateTo_bbox.x+15 && linkModel_bbox.y > relateTo_bbox.y-20)){
                    this.data('linkModel').attr({height : 30 , width : relateFrom_bbox.width - 10});                        
                    this.data('createFormChkBox').attr({display : "none"});this.data('createFormTick').attr({display : "none"});
                    this.data('tickLinkModelSelectBox').attr({display : "none"});this.data('crudOptionsLinkBox').attr({display : "none"});
                    this.data('linkModel').addClass("dragOverError");
                    this.data('lineFromMainModel').attr({display : "none"});
                    this.data('arrowFromMainModel').attr({display : "none"}); 
                    this.data('lineFromRelationModel').attr({display : "none"});
                    this.data('arrowFromRelationModel').attr({display : "none"});
    
                    if (linkModel_bbox.y+20 < relateFrom_bbox.y2 && linkModel_bbox.x < relateFrom_bbox.x2- 15){
                        this.data('relateFrom').attr({ height : this.data('modelHeight') + this.data('lengthRel') * 20});
                        this.data('relateFrom').addClass("dragOverError");
                    }
                    else{
                        this.data('relateTo').attr({ height: this.data('modelHeight') + 30 });
                        this.data('relateTo').addClass("dragOverError");
                    }
                    if ((linkModel_bbox.x > relateFrom_bbox.x && linkModel_bbox.y > relateFrom_bbox.y + 15 && linkModel_bbox.x2 < relateFrom_bbox.x2 && linkModel_bbox.y2 < relateFrom_bbox.y2) || (linkModel_bbox.x > relateTo_bbox.x && linkModel_bbox.y > relateTo_bbox.y+ 15 && linkModel_bbox.x2 < relateTo_bbox.x2 && linkModel_bbox.y2 < relateTo_bbox.y2)){                          
                        this.data('relateFrom').removeClass("dragOverError");
                        this.data('relateTo').removeClass("dragOverError");
                        this.data('linkModel').removeClass("dragOverError");                            
                        this.data('linkModel').addClass("dragOver");


                        //check the schema is already pushed...
                        var alreadyInserted = false;
                        for (var count =0 ;count < relationSchema.length; count++){
                            if (relationSchema[count].modelName.toLowerCase() == (this.data('textMainModel').node.textContent.slice(0 ,-1)).toLowerCase() || relationSchema[count].modelName.toLowerCase() == (this.data('textRelationModel').node.textContent.slice(0 ,-1)).toLowerCase()){
                                for (var check = 0 ;check < relationSchema[count].relations.length ; check++){
                                    if (relationSchema[count].relations[check].modelName.toLowerCase() == (this.data('textLinkModel').node.textContent.slice(0 , -1)).toLowerCase()){
                                        alreadyInserted = true;
                                    }
                                }
                            }
                        }
    
                        if (linkModel_bbox.x > relateFrom_bbox.x && linkModel_bbox.y > relateFrom_bbox.y + 15 && linkModel_bbox.x2 < relateFrom_bbox.x2 && linkModel_bbox.y2 < relateFrom_bbox.y2) {
                            this.data('relateFrom').addClass("dragOver");
                            if (alreadyInserted == false){
                                for (var count =0 ;count < relationSchema.length; count++){
                                    if (relationSchema[count].modelName.toLowerCase() == (this.data('textMainModel').node.textContent.slice(0 ,-1)).toLowerCase()){
                                        relationSchema[count].relations.push({
                                            modelName : (this.data('textLinkModel').node.textContent.slice(0 ,-1)).toLowerCase(),
                                            "createOperation" : false,
                                            "readOperation" : false,
                                            "updateOperation" : false,
                                            "deleateOperation" : false                                        
                                        })
                                    }
                                }
                            }
                        }
                        else {
                            this.data('relateTo').addClass("dragOver");
                            if (alreadyInserted == false){
                                for (var count =0 ;count < relationSchema.length; count++){
                                    if (relationSchema[count].modelName.toLowerCase() == (this.data('textRelationModel').node.textContent.slice(0 ,-1)).toLowerCase()){
                                        relationSchema[count].relations.push({
                                            modelName : (this.data('textLinkModel').node.textContent.slice(0 ,-1)).toLowerCase(),
                                            "createOperation" : false,
                                            "readOperation" : false,
                                            "updateOperation" : false,
                                            "deleateOperation" : false                                        
                                        })
                                    }
                                }
                            }
                        }//end of schema insertion...
                    }
                }
                else if (((linkModel_bbox.y2 < relateFrom_bbox.y || linkModel_bbox.y > relateFrom_bbox.y2 || linkModel_bbox.x > relateFrom_bbox.x2)&& linkModel_bbox.x2 < relateTo_bbox.x)|| ((linkModel_bbox.y2 < relateTo_bbox.y+5 || linkModel_bbox.y > relateTo_bbox.y2-5 || linkModel_bbox.x2 < relateTo_bbox.x+5 )&& linkModel_bbox.x > relateFrom_bbox.x2)){
                    this.data('linkModel').attr({ height : this.data('modelHeight') , width : relateFrom_bbox.width}); 
                    this.data('relateFrom').removeClass("dragOverError");
                    this.data('relateTo').removeClass("dragOverError");
                    this.data('linkModel').removeClass("dragOverError");
                    this.data('relateFrom').removeClass("dragOver");
                    this.data('relateTo').removeClass("dragOver");
                    this.data('linkModel').removeClass("dragOver");
                    this.data('lineFromMainModel').attr({display : "block"});
                    this.data('arrowFromMainModel').attr({display : "block"}); 
                    this.data('lineFromRelationModel').attr({display : "block"});
                    this.data('arrowFromRelationModel').attr({display : "block"});
                    this.data('createFormChkBox').attr({display : "block"});
//                  this.data('createFormTick').attr({display : "block"});

                    if (window["checked_"+(this.data('textLinkModel').node.textContent.slice(0 ,-1)).toLowerCase()+"_hasManyThrough"+(this.data('textMainModel').node.textContent.slice(0 ,-1)).toLowerCase()] == true){
                        this.data('tickLinkModelSelectBox').attr({display : "block"});
                        this.data('crudOptionsLinkBox').attr({display : "block"});
                    }
                    
                    //pop relation from relationSchema object...
                    for (var count = 0;count < relationSchema.length ; count++){
                        if (relationSchema[count].modelName.toLowerCase() == (this.data('textMainModel').node.textContent.slice(0 ,-1)).toLowerCase() || relationSchema[count].modelName.toLowerCase() == (this.data('textRelationModel').node.textContent.slice(0 ,-1)).toLowerCase()){
                            for (var check = 0 ;check < relationSchema[count].relations.length ; check++){
                                if (relationSchema[count].relations[check].modelName.toLowerCase() == (this.data('textLinkModel').node.textContent.slice(0 , -1)).toLowerCase()){
                                    relationSchema[count].relations.splice(check , 1);
                                }
                            }
                        }
                    }
                }
                //alterate the line that attach to models...
                var lineFromMainModel_bbox = this.data('lineFromMainModel').getBBox();
                var lineFromRelationModel_bbox = this.data('lineFromRelationModel').getBBox();
                var arrowFromMainModel_bbox = this.data('arrowFromMainModel').getBBox();
                var arrowFromRelationModel_bbox = this.data('arrowFromRelationModel').getBBox();
                if (linkModel_bbox.x < relateFrom_bbox.x2+33){
                    this.data('lineFromMainModel').attr({display : "none"});
                    this.data('arrowFromMainModel').attr({display : "none"});                
                }
                else if(linkModel_bbox.x2 > relateTo_bbox.x-33){
                    this.data('lineFromRelationModel').attr({display : "none"});
                    this.data('arrowFromRelationModel').attr({display : "none"}); 
                }
                //alter lines
                var lineFromMainModelPath = "M " + relateFrom_bbox.x2 + " " + (relateFrom_bbox.y+50) + "H " + (relateFrom_bbox.x2 + 20)+"V " + (linkModel_bbox.y+50) + "H " + linkModel_bbox.x;
                this.data('lineFromMainModel').attr({
                    d : lineFromMainModelPath,
                    fill: "white",
                    stroke: "#1f2c39",
                    strokeWidth: 1
                })
                var lineFromRelationModelPath = "M " + relateTo_bbox.x + " " + (relateTo_bbox.y+50) + "H " + (relateTo_bbox.x-20) + "V " + (linkModel_bbox.y+50) + "H " + linkModel_bbox.x2;
                this.data('lineFromRelationModel').attr({
                    d : lineFromRelationModelPath,
                    fill: "white",
                    stroke: "#1f2c39",
                    strokeWidth: 1
                })
    
                //alter polygon {Arrow at end of line toward related model}
                var arrowFromMainModelPoints =  [(linkModel_bbox.x) , (linkModel_bbox.y + 50) , (linkModel_bbox.x -10) , (linkModel_bbox.y + 50 -10) ,(linkModel_bbox.x -10) , (linkModel_bbox.y + 50 + 10)]
                this.data('arrowFromMainModel').attr({
                    points :arrowFromMainModelPoints,
                    fill: "#1f2c39",
                    stroke: "#1f2c39",
                    strokeWidth: 1,
                });
                var arrowFromRelationModelPoints =  [(linkModel_bbox.x2) , (linkModel_bbox.y + 50) , (linkModel_bbox.x2 +10) , (linkModel_bbox.y + 50 -10) ,(linkModel_bbox.x2 +10) , (linkModel_bbox.y + 50 + 10)]
                this.data('arrowFromRelationModel').attr({
                    points :arrowFromRelationModelPoints,
                    fill: "#1f2c39",
                    stroke: "#1f2c39",
                    strokeWidth: 1,
                });
    
        };

        function limitStartDragHasMany( x, y, ev ) {
                this.data('ox', this.data('x')); this.data('oy', this.data('y'));
        };
        function limitStopDragHasMany(ev ) {
            var relateTo_bbox = this.data("relateTo").getBBox();
            var relateFrom_bbox = this.data("relateFrom").getBBox();
            var linkModel_bbox = this.getBBox();
            //remove all classes from rect...
            if ( this.data('linkModel').hasClass('dragOver') || this.data('relateFrom').hasClass('dragOver') || this.data('relateTo').hasClass('dragOver')){
                this.data('relateFrom').removeClass('dragOver');
                this.data('relateTo').removeClass('dragOver')                                        
                this.data('linkModel').removeClass('dragOver')                    
            }
        };
    });
})();
    
//limit drag for hasAndBelongsToMany relation
(function() {
    
      Snap.plugin( function( Snap, Element, Paper, global ) {
    
        Element.prototype.limitDrag = function( params ) {
            this.data('minx', params.minx ); this.data('miny', params.miny );
            this.data('maxx', params.maxx ); this.data('maxy', params.maxy );
            this.data('x', params.x );    this.data('y', params.y );
            this.data('ibb', this.getBBox() );this.data('ot', this.transform().local );
            this.data('relateTo' , params.relateTo);this.data('relateFrom' , params.relateFrom);
            this.data('linkModel' , params.linkModel); var minHieght = this.data('linkModel').getBBox();
            this.data('lengthRel' , params.lengthRel) ;this.data('textLinkModel' , params.textLinkModel);
            this.data('lineFromMainModel' , params.lineFromMainModel);this.data('lineFromRelationModel' , params.lineFromRelationModel);
            this.data('arrowFromMainModel' , params.arrowFromMainModel);this.data('arrowFromRelationModel' , params.arrowFromRelationModel);                    
            this.data('textMainModel' , params.textMainModel); this.data('textRelationModel' , params.textRelationModel);
            this.data('modelHeight' , minHieght.height);
            this.drag( limitMoveDrag, limitStartDrag , limitStopDrag);
            return this;    
        };
    
        // this code is old and clunky now, and transform possibly in wrong order, so only use for simple cases
        function limitMoveDrag( dx, dy ) {
            var tdx, tdy;
            var sInvMatrix = this.transform().globalMatrix.invert();
            sInvMatrix.e = sInvMatrix.f = 0; 
            tdx = sInvMatrix.x( dx,dy ); tdy = sInvMatrix.y( dx,dy );

            this.data('x', +this.data('ox') + tdx);
            this.data('y', +this.data('oy') + tdy);
            if( this.data('x') > this.data('maxx') - this.data('ibb').width  ) 
                    { this.data('x', this.data('maxx') - this.data('ibb').width  ) };
            if( this.data('y') > this.data('maxy') - this.data('ibb').height ) 
                    { this.data('y', this.data('maxy') - this.data('ibb').height ) };
            if( this.data('x') < this.data('minx') ) { this.data('x', this.data('minx') ) };
                if( this.data('y') < this.data('miny') ) { this.data('y', this.data('miny') ) };
            this.transform( this.data('ot') + "t" + [ this.data('x'), this.data('y') ]  );
            //check dragOver and dragOut...
            var relateTo_bbox = this.data("relateTo").getBBox();
            var relateFrom_bbox = this.data("relateFrom").getBBox();
            var linkModel_bbox = this.getBBox();

            if ((linkModel_bbox.y+20 < relateFrom_bbox.y2 && linkModel_bbox.x < relateFrom_bbox.x2- 15) || (linkModel_bbox.x2 > relateTo_bbox.x+15 && linkModel_bbox.y > relateTo_bbox.y-20)){
                this.data('linkModel').attr({height : 30 , width : relateFrom_bbox.width - 10});
                this.data('linkModel').addClass("dragOverError");
                this.data('lineFromMainModel').attr({display : "none"});
                this.data('arrowFromMainModel').attr({display : "none"}); 
                this.data('lineFromRelationModel').attr({display : "none"});
                this.data('arrowFromRelationModel').attr({display : "none"});

                if (linkModel_bbox.y+20 < relateFrom_bbox.y2 && linkModel_bbox.x < relateFrom_bbox.x2- 15){
                    this.data('relateFrom').attr({ height : this.data('modelHeight') + this.data('lengthRel') * 20});
                    this.data('relateFrom').addClass("dragOverError");
                }
                else{
                    this.data('relateTo').attr({ height: this.data('modelHeight') + 30 });
                    this.data('relateTo').addClass("dragOverError");
                }
                if ((linkModel_bbox.x > relateFrom_bbox.x && linkModel_bbox.y > relateFrom_bbox.y + 15 && linkModel_bbox.x2 < relateFrom_bbox.x2 && linkModel_bbox.y2 < relateFrom_bbox.y2) || (linkModel_bbox.x > relateTo_bbox.x && linkModel_bbox.y > relateTo_bbox.y+ 15 && linkModel_bbox.x2 < relateTo_bbox.x2 && linkModel_bbox.y2 < relateTo_bbox.y2)){                          
                    this.data('relateFrom').removeClass("dragOverError");
                    this.data('relateTo').removeClass("dragOverError");
                    this.data('linkModel').removeClass("dragOverError");                            
                    this.data('linkModel').addClass("dragOver");
                    //check the schema is already pushed...
                    var alreadyInserted = false;
                    for (var count =0 ;count < relationSchema.length; count++){
                        if (relationSchema[count].modelName.toLowerCase() == (this.data('textMainModel').node.textContent.slice(0 ,-1)).toLowerCase() || relationSchema[count].modelName.toLowerCase() == (this.data('textRelationModel').node.textContent.slice(0 ,-1)).toLowerCase()){
                            for (var check = 0 ;check < relationSchema[count].relations.length ; check++){
                                if (relationSchema[count].relations[check].modelName.toLowerCase() == (this.data('textLinkModel').node.textContent.slice(0 , -1)).toLowerCase()){
                                    alreadyInserted = true;
                                }
                            }
                        }
                    }

                    if (linkModel_bbox.x > relateFrom_bbox.x && linkModel_bbox.y > relateFrom_bbox.y + 15 && linkModel_bbox.x2 < relateFrom_bbox.x2 && linkModel_bbox.y2 < relateFrom_bbox.y2) {
                        this.data('relateFrom').addClass("dragOver");
                        if (alreadyInserted == false){
                            for (var count =0 ;count < relationSchema.length; count++){
                                if (relationSchema[count].modelName.toLowerCase() == (this.data('textMainModel').node.textContent.slice(0 ,-1)).toLowerCase()){
                                    relationSchema[count].relations.push({
                                        modelName : (this.data('textLinkModel').node.textContent.slice(0 ,-1)).toLowerCase(),
                                        "createOperation" : false,
                                        "readOperation" : false,
                                        "updateOperation" : false,
                                        "deleateOperation" : false                                        
                                    })
                                }
                            }
                        }
                    }
                    else {
                        this.data('relateTo').addClass("dragOver");
                        if (alreadyInserted == false){
                            for (var count =0 ;count < relationSchema.length; count++){
                                if (relationSchema[count].modelName.toLowerCase() == (this.data('textRelationModel').node.textContent.slice(0 ,-1)).toLowerCase()){
                                    relationSchema[count].relations.push({
                                        modelName : (this.data('textLinkModel').node.textContent.slice(0 ,-1)).toLowerCase(),
                                        "createOperation" : false,
                                        "readOperation" : false,
                                        "updateOperation" : false,
                                        "deleateOperation" : false                                        
                                    })
                                }
                            }
                        }
                    }//end of schema insertion...
                }
            }
            else if (((linkModel_bbox.y2 < relateFrom_bbox.y || linkModel_bbox.y > relateFrom_bbox.y2 || linkModel_bbox.x > relateFrom_bbox.x2)&& linkModel_bbox.x2 < relateTo_bbox.x)|| ((linkModel_bbox.y2 < relateTo_bbox.y+5 || linkModel_bbox.y > relateTo_bbox.y2-5 || linkModel_bbox.x2 < relateTo_bbox.x+5 )&& linkModel_bbox.x > relateFrom_bbox.x2)){
                this.data('linkModel').attr({ height : this.data('modelHeight') , width : relateFrom_bbox.width}); 
                this.data('relateFrom').removeClass("dragOverError");
                this.data('relateTo').removeClass("dragOverError");
                this.data('linkModel').removeClass("dragOverError");
                this.data('relateFrom').removeClass("dragOver");
                this.data('relateTo').removeClass("dragOver");
                this.data('linkModel').removeClass("dragOver");
                this.data('lineFromMainModel').attr({display : "block"});
                this.data('arrowFromMainModel').attr({display : "block"}); 
                this.data('lineFromRelationModel').attr({display : "block"});
                this.data('arrowFromRelationModel').attr({display : "block"});

                //pop relation from relationSchema object...
                for (var count = 0;count < relationSchema.length ; count++){
                    if (relationSchema[count].modelName.toLowerCase() == (this.data('textMainModel').node.textContent.slice(0 ,-1)).toLowerCase() || relationSchema[count].modelName.toLowerCase() == (this.data('textRelationModel').node.textContent.slice(0 ,-1)).toLowerCase()){
                        for (var check = 0 ;check < relationSchema[count].relations.length ; check++){
                            if (relationSchema[count].relations[check].modelName.toLowerCase() == (this.data('textLinkModel').node.textContent.slice(0 , -1)).toLowerCase()){
                                relationSchema[count].relations.splice(check , 1);
                            }
                        }
                    }
                }
            }

            //alterate the line that attach to models...
            var lineFromMainModel_bbox = this.data('lineFromMainModel').getBBox();
            var lineFromRelationModel_bbox = this.data('lineFromRelationModel').getBBox();
            var arrowFromMainModel_bbox = this.data('arrowFromMainModel').getBBox();
            var arrowFromRelationModel_bbox = this.data('arrowFromRelationModel').getBBox();
            if (linkModel_bbox.x < relateFrom_bbox.x2+33){
                this.data('lineFromMainModel').attr({display : "none"});
                this.data('arrowFromMainModel').attr({display : "none"});                
            }
            else if(linkModel_bbox.x2 > relateTo_bbox.x-33){
                this.data('lineFromRelationModel').attr({display : "none"});
                this.data('arrowFromRelationModel').attr({display : "none"}); 
            }

            //alter lines
            var lineFromMainModelPath = "M " + relateFrom_bbox.x2 + " " + (relateFrom_bbox.y+50) + "H " + (relateFrom_bbox.x2 + 20)+"V " + (linkModel_bbox.y+50) + "H " + linkModel_bbox.x;
            this.data('lineFromMainModel').attr({
                d : lineFromMainModelPath,
                fill: "white",
                stroke: "#1f2c39",
                strokeWidth: 1
            })
            var lineFromRelationModelPath = "M " + relateTo_bbox.x + " " + (relateTo_bbox.y+50) + "H " + (relateTo_bbox.x-20) + "V " + (linkModel_bbox.y+50) + "H " + linkModel_bbox.x2;
            this.data('lineFromRelationModel').attr({
                d : lineFromRelationModelPath,
                fill: "white",
                stroke: "#1f2c39",
                strokeWidth: 1
            })

            //alter polygon {Arrow at end of line toward related model}
            var arrowFromMainModelPoints =  [(linkModel_bbox.x) , (linkModel_bbox.y + 50) , (linkModel_bbox.x -10) , (linkModel_bbox.y + 50 -10) ,(linkModel_bbox.x -10) , (linkModel_bbox.y + 50 + 10)]
            this.data('arrowFromMainModel').attr({
                points :arrowFromMainModelPoints,
                fill: "#1f2c39",
                stroke: "#1f2c39",
                strokeWidth: 1,
            });
            var arrowFromRelationModelPoints =  [(linkModel_bbox.x2) , (linkModel_bbox.y + 50) , (linkModel_bbox.x2 +10) , (linkModel_bbox.y + 50 -10) ,(linkModel_bbox.x2 +10) , (linkModel_bbox.y + 50 + 10)]
            this.data('arrowFromRelationModel').attr({
                points :arrowFromRelationModelPoints,
                fill: "#1f2c39",
                stroke: "#1f2c39",
                strokeWidth: 1,
            });
        }
        function limitStartDrag( x, y, ev ) {
            this.data('ox', this.data('x')); this.data('oy', this.data('y'));            
        };

        function limitStopDrag( x, y){            
            var relateTo_bbox = this.data("relateTo").getBBox();
            var relateFrom_bbox = this.data("relateFrom").getBBox();
            var linkModel_bbox = this.getBBox();
            /*if (linkModel_bbox.x > relateFrom_bbox.x && linkModel_bbox.x2 < relateFrom_bbox.x2 && linkModel_bbox.y > relateFrom_bbox.y+20 && linkModel_bbox.y2 < relateFrom_bbox.y2){
                this.data('linkModel').attr({
                    transform: "t" + [ 0 ,this.data('iteration')*20]
                });  
            }*/
            //remove all classes from rect...
            if ( this.data('linkModel').hasClass('dragOver') || this.data('relateFrom').hasClass('dragOver') || this.data('relateTo').hasClass('dragOver')){
                this.data('relateFrom').removeClass('dragOver');
                this.data('relateTo').removeClass('dragOver')                                        
                this.data('linkModel').removeClass('dragOver')                    
            }
        }
    });
})();
// create relationSchema for models...
var relationSchema = new Array();
var belongsToCounter = 0 , hasManyCounter =0 , hasOneCounter =0 , hasManyThroughCounter = 0;
var model_schema = <%- JSON.stringify(model_schema) %>;

<% var belongsTo = [] , hasMany = [] ,hasAndBelongsToMany = [], hasManyThrough = [] , hasOne = [] , hasAndBelongsToManyObj = [],hasManyObj = [], linked_model;
for (var count = 0 ;count < lb_relation.length ; count++){
 lb_relation[count].name =  lb_relation[count].name.charAt(0).toUpperCase() +  lb_relation[count].name.slice(1); 
 lb_relation[count].relations.model =  lb_relation[count].relations.model.charAt(0).toUpperCase() +  lb_relation[count].relations.model.slice(1);
}for (var i=0 ; i< model_schema.length ; i++){
    belongsToCounter = 0; hasManyCounter =0; hasOneCounter =0; hasManyThroughCounter = 0;  
    belongsTo.length = 0;hasMany.length = 0; hasAndBelongsToMany.length = 0; hasManyThrough.length = 0;hasOne.length = 0;
    for (var count = 0 ;count < lb_relation.length ; count++){
        if (model_schema[i].name.toLowerCase() == lb_relation[count].name.toLowerCase()  && lb_relation[count].relations.type == "belongsTo"){
            belongsTo.push(lb_relation[count]);
        }
        if (model_schema[i].name.toLowerCase() == lb_relation[count].name.toLowerCase() && lb_relation[count].relations.type == "hasMany"  && !("through" in lb_relation[count].relations)){
            hasMany.push(lb_relation[count]);
        }
        if (model_schema[i].name.toLowerCase() == lb_relation[count].name.toLowerCase() && lb_relation[count].relations.type == "hasMany"  && ("through" in lb_relation[count].relations)){
            var push = true;
            for (var check = 0 ;check < hasManyObj.length ; check++){
                if (hasManyObj[check].through == lb_relation[count].relations.through.toLowerCase() && hasManyObj[check].relation_model == lb_relation[count].name.toLowerCase() && hasManyObj[check].model == lb_relation[count].relations.model.toLowerCase()){
                    push = false;
                }
            }
            if (push){
                hasManyThrough.push(lb_relation[count]);
                hasManyObj.push({
                    model : lb_relation[count].name.toLowerCase(),
                    through: lb_relation[count].relations.through.toLowerCase(),
                    relation_model : lb_relation[count].relations.model.toLowerCase()
                });
            }
        }
        if (model_schema[i].name.toLowerCase() == lb_relation[count].name.toLowerCase() && lb_relation[count].relations.type == "hasAndBelongsToMany"){
            var push = true;
            for (var check = 0 ;check < hasAndBelongsToManyObj.length ; check++){
                if (hasAndBelongsToManyObj[check].model  == lb_relation[count].relations.model.toLowerCase() && hasAndBelongsToManyObj[check].relation_model == lb_relation[count].name.toLowerCase()){
                    push = false;
                }
            }
            if (push){
                hasAndBelongsToMany.push(lb_relation[count]);
                hasAndBelongsToManyObj.push({
                    model : lb_relation[count].name.toLowerCase(),
                    relation_model : lb_relation[count].relations.model.toLowerCase()
                });
            }        }
        if (model_schema[i].name.toLowerCase() == lb_relation[count].name.toLowerCase() && lb_relation[count].relations.type == "hasOne"){
            hasOne.push(lb_relation[count]);
        }
    }%>

//push main model object inside relationSchema array...
relationSchema.push({
    "modelName" : "<%= model_schema[i].name%>",
    "properties" : [<%for (var property in model_schema[i].properties){%>
    {
        "field" : "<%= property %>" , 
        "type" : "<%= model_schema[i].properties[property].type %>",
        "required" : "<% if (model_schema[i].properties[property].required){%>true<%}else {%>false<%}%>"
    },
    <%}%>
    ],
    "operations" : {
    "createOperation" : false,
    "readOperation" : false,
    "updateOperation" : false,
    "deleateOperation" : false
    },
    "relations" : [],
    "ACL" :[]
});

//get access to id
var <%= model_schema[i].name%> = Snap("#<%= model_schema[i].name%>");

//modal rectangle...
var drag_title_<%= model_schema[i].name%> = Snap.parse('<title>Drag and Drop here related model if exist for generate relation inside form, Double click to show details</title>');

var block_<%= model_schema[i].name%> = <%= model_schema[i].name%>.rect(20, 20, 150, 100, 5, 5);
block_<%= model_schema[i].name%>.attr({
    fill: "rgb(236, 240, 241)",
    stroke: "#1f2c39",
    strokeWidth: 1,
    'stroke-dasharray': 5
});
block_<%= model_schema[i].name%>.append(drag_title_<%= model_schema[i].name%>);


//get modal properties...JSON.stringify(data)
var <%= model_schema[i].name%>Properties = <%-JSON.stringify(model_schema[i].properties)%>;

//attach double click event on modal which trigger and display properties panel...
block_<%= model_schema[i].name%>.dblclick(function(){
    displayPropPanel('<%= model_schema[i].name%>');
});

//modal text populate inside modal rect...
var text_<%= model_schema[i].name%> = <%= model_schema[i].name%>.text(0, 0, "<%= model_schema[i].name.toUpperCase().substring(0 , 25) %>!");
text_<%= model_schema[i].name%>.attr({
    x: block_<%= model_schema[i].name%>.node.x.animVal.value + 10,
    y: block_<%= model_schema[i].name%>.node.y.animVal.value + 20,
    'font-size': 13
});
// line separates modal head and body...
var line_<%= model_schema[i].name%> = <%= model_schema[i].name%>.line(0, 0, 0, 0);
line_<%= model_schema[i].name%>.attr({
    x1: block_<%= model_schema[i].name%>.node.x.animVal.value,
    y1: Number(text_<%= model_schema[i].name%>.node.attributes.y.nodeValue) + 5,
    x2: block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value,
    y2: Number(text_<%= model_schema[i].name%>.node.attributes.y.nodeValue) + 5,
    stroke: "#1f2c39",
    strokeWidth: 1,
    strokeLinecap: "round"
});

// change coordinates of line and mode1_rect according to text
/*block_<%= model_schema[i].name%>.attr({
    width: Number(text_<%= model_schema[i].name%>.node.attributes.x.value) + (Number(text_<%= model_schema[i].name%>.node.textContent.length) * 10 + 30)
});
line_<%= model_schema[i].name%>.attr({
    x2: (block_<%= model_schema[i].name%>.node.width.animVal.value + block_<%= model_schema[i].name%>.node.x.animVal.value)
})*/

//tooltip on checkbox...
var select_title_<%= model_schema[i].name%> = Snap.parse('<title>Click here to select model for CRUD Operations , if unchecked Crud form are not created</title>');

//select box checked when modal form is created
var select_<%= model_schema[i].name%> = <%= model_schema[i].name%>.rect(0, 0, 15, 15, 2, 2);
select_<%= model_schema[i].name%>.attr({
    x: (block_<%= model_schema[i].name%>.node.width.animVal.value + block_<%= model_schema[i].name%>.node.x.animVal.value - 10),
    y: (block_<%= model_schema[i].name%>.node.y.animVal.value - 10),
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 2
});
select_<%= model_schema[i].name%>.append(select_title_<%= model_schema[i].name%>);

//check symbol inside select box...
var tick_path_<%= model_schema[i].name%> = "M " + (select_<%= model_schema[i].name%>.node.x.animVal.value + 3) + " " + (select_<%= model_schema[i].name%>.node.y.animVal.value + 5) + "L " + (select_<%= model_schema[i].name%>.node.x.animVal.value + 7) + " " + (select_<%= model_schema[i].name%>.node.y.animVal.value + 10) + "L " + (select_<%= model_schema[i].name%>.node.x.animVal.value + select_<%= model_schema[i].name%>.node.width.animVal.value) + " " + (select_<%= model_schema[i].name%>.node.y.animVal.value - 3);
var tick_<%= model_schema[i].name%> = <%= model_schema[i].name%>.path(tick_path_<%= model_schema[i].name%>)
tick_<%= model_schema[i].name%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});

//check and uncheck function on checkbox...
var checked_<%= model_schema[i].name%> = false;
var selectCheckBox_<%= model_schema[i].name%> = function () {
    if (!checked_<%= model_schema[i].name%>) {
        //  crud_opt_group.removeClass('animated bounceOutUp')
        crud_opt_group_<%= model_schema[i].name%>.attr({
            'display': 'block'
        })

        tick_<%= model_schema[i].name%>.attr({ display : "block"});
        // crud_opt_group_<%= model_schema[i].name%>.addClass('animated bounceInUp');
        checked_<%= model_schema[i].name%> = true;
    } else if (checked_<%= model_schema[i].name%>) {
        crud_opt_group_<%= model_schema[i].name%>.attr({
            'display': 'none'
        })
        tick_<%= model_schema[i].name%>.attr({ display : "none"});
        // crud_opt_group.removeClass('animated bounceInUp');
        // crud_opt_group.addClass('animated bounceOutUp')
        checked_<%= model_schema[i].name%> = false;
    }
};
select_<%= model_schema[i].name%>.click(selectCheckBox_<%= model_schema[i].name%>);
tick_<%= model_schema[i].name%>.click(selectCheckBox_<%= model_schema[i].name%>);

//Crud Rect...
var crud_opt_<%= model_schema[i].name%> = <%= model_schema[i].name%>.rect(0, 0, 80, 90, 5, 5);
crud_opt_<%= model_schema[i].name%>.attr({
    x: (select_<%= model_schema[i].name%>.node.x.animVal.value + 15),
    y: (select_<%= model_schema[i].name%>.node.y.animVal.value + 20),
    fill: "white",
    stroke: "#1f2c39",
    'stroke-dasharray': 10
})

//Crud options inside Crud_opt rect...
var create_<%= model_schema[i].name%> = <%= model_schema[i].name%>.text(0, 0, "-   create");
create_<%= model_schema[i].name%>.attr({
    x: (crud_opt_<%= model_schema[i].name%>.node.x.animVal.value + 5),
    y: (crud_opt_<%= model_schema[i].name%>.node.y.animVal.value + 20),
    'font-size': 15
});
var listing_<%= model_schema[i].name%> = <%= model_schema[i].name%>.text(0, 0, "-   Listing");
listing_<%= model_schema[i].name%>.attr({
    x: (crud_opt_<%= model_schema[i].name%>.node.x.animVal.value + 5),
    y: (crud_opt_<%= model_schema[i].name%>.node.y.animVal.value + 40),
    'font-size': 15
});
var update_<%= model_schema[i].name%> = <%= model_schema[i].name%>.text(0, 0, "-   update");
update_<%= model_schema[i].name%>.attr({
    x: (crud_opt_<%= model_schema[i].name%>.node.x.animVal.value + 5),
    y: (crud_opt_<%= model_schema[i].name%>.node.y.animVal.value + 60),
    'font-size': 15
});
var deleate_<%= model_schema[i].name%> = <%= model_schema[i].name%>.text(0, 0, "-   delete");
deleate_<%= model_schema[i].name%>.attr({
    x: (crud_opt_<%= model_schema[i].name%>.node.x.animVal.value + 5),
    y: (crud_opt_<%= model_schema[i].name%>.node.y.animVal.value + 80),
    'font-size': 15
});

//check and uncheck Crud options functions...
var createCheckBoxClicked_<%= model_schema[i].name%> = false;
var createCheckBoxClick_<%= model_schema[i].name%> = function () {
    if (!createCheckBoxClicked_<%= model_schema[i].name%>) {
        create_tick_<%= model_schema[i].name%>.attr({
            display: "block"
        });
        createCheckBoxClicked_<%= model_schema[i].name%> = true;
        relationSchema[<%=i%>].operations.createOperation = true;
    } else if (createCheckBoxClicked_<%= model_schema[i].name%>) {
        create_tick_<%= model_schema[i].name%>.attr({
            display: "none"
        });
        createCheckBoxClicked_<%= model_schema[i].name%> = false;
        relationSchema[<%=i%>].operations.createOperation = false;
    }
}
//listing check all three remaining options include listing , delete , edit
var listingCheckBoxClicked_<%= model_schema[i].name%> = false;
var listingCheckBoxClick_<%= model_schema[i].name%> = function () {
    if (!listingCheckBoxClicked_<%= model_schema[i].name%>) {
        listing_tick_<%= model_schema[i].name%>.attr({
            display: "block"
        });
        update_tick_<%= model_schema[i].name%>.attr({
            display: "block"
        });
        deleate_tick_<%= model_schema[i].name%>.attr({
            display: "block"
        });
        listingCheckBoxClicked_<%= model_schema[i].name%> = true;
        relationSchema[<%=i%>].operations.deleateOperation = true; 
        relationSchema[<%=i%>].operations.readOperation = true; 
        relationSchema[<%=i%>].operations.updateOperation = true;
    } else if (listingCheckBoxClicked_<%= model_schema[i].name%>) {
        listing_tick_<%= model_schema[i].name%>.attr({
            display: "none"
        });
        update_tick_<%= model_schema[i].name%>.attr({
            display: "none"
        });
        deleate_tick_<%= model_schema[i].name%>.attr({
            display: "none"
        });
        listingCheckBoxClicked_<%= model_schema[i].name%> = false;
        relationSchema[<%=i%>].operations.deleateOperation = false; 
        relationSchema[<%=i%>].operations.readOperation = false; 
        relationSchema[<%=i%>].operations.updateOperation = false
    }
}

//now set checkboxes on front of Crud operations...
var createCheckBox_<%= model_schema[i].name%> = <%= model_schema[i].name%>.rect(0, 0, 12, 12, 1, 1);
createCheckBox_<%= model_schema[i].name%>.attr({
    x: (Number(create_<%= model_schema[i].name%>.node.attributes.x.nodeValue) + 60),
    y: (create_<%= model_schema[i].name%>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
});
createCheckBox_<%= model_schema[i].name%>.click(createCheckBoxClick_<%= model_schema[i].name%>);
var listingCheckBox_<%= model_schema[i].name%> = <%= model_schema[i].name%>.rect(0, 0, 12, 12, 1, 1);
listingCheckBox_<%= model_schema[i].name%>.attr({
    x: (Number(listing_<%= model_schema[i].name%>.node.attributes.x.nodeValue) + 60),
    y: (listing_<%= model_schema[i].name%>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
})
listingCheckBox_<%= model_schema[i].name%>.click(listingCheckBoxClick_<%= model_schema[i].name%>);
var updateCheckBox_<%= model_schema[i].name%> = <%= model_schema[i].name%>.rect(0, 0, 12, 12, 1, 1);
updateCheckBox_<%= model_schema[i].name%>.attr({
    x: (Number(update_<%= model_schema[i].name%>.node.attributes.x.nodeValue) + 60),
    y: (update_<%= model_schema[i].name%>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
});
updateCheckBox_<%= model_schema[i].name%>.click(listingCheckBoxClick_<%= model_schema[i].name%>);
var deleateCheckBox_<%= model_schema[i].name%> = <%= model_schema[i].name%>.rect(0, 0, 12, 12, 1, 1);
deleateCheckBox_<%= model_schema[i].name%>.attr({
    x: (Number(deleate_<%= model_schema[i].name%>.node.attributes.x.nodeValue) + 60),
    y: (deleate_<%= model_schema[i].name%>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
})
deleateCheckBox_<%= model_schema[i].name%>.click(listingCheckBoxClick_<%= model_schema[i].name%>);

//tick inside create check_box...
var create_tick_path_<%= model_schema[i].name%> = "M " + (createCheckBox_<%= model_schema[i].name%>.node.x.animVal.value + 1) + " " + (createCheckBox_<%= model_schema[i].name%>.node.y.animVal.value + 6) + "L " + (createCheckBox_<%= model_schema[i].name%>.node.x.animVal.value + 5) + " " + (createCheckBox_<%= model_schema[i].name%>.node.y.animVal.value + 10) + "L " + (createCheckBox_<%= model_schema[i].name%>.node.x.animVal.value + createCheckBox_<%= model_schema[i].name%>.node.width.animVal.value) + " " + (createCheckBox_<%= model_schema[i].name%>.node.y.animVal.value - 2);
var create_tick_<%= model_schema[i].name%> = <%= model_schema[i].name%>.path(create_tick_path_<%= model_schema[i].name%>);
create_tick_<%= model_schema[i].name%>.click(createCheckBoxClick_<%= model_schema[i].name%>);
create_tick_<%= model_schema[i].name%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside listing check_box...
var listing_tick_path_<%= model_schema[i].name%> = "M " + (listingCheckBox_<%= model_schema[i].name%>.node.x.animVal.value + 1) + " " + (listingCheckBox_<%= model_schema[i].name%>.node.y.animVal.value + 6) + "L " + (listingCheckBox_<%= model_schema[i].name%>.node.x.animVal.value + 5) + " " + (listingCheckBox_<%= model_schema[i].name%>.node.y.animVal.value + 10) + "L " + (listingCheckBox_<%= model_schema[i].name%>.node.x.animVal.value + listingCheckBox_<%= model_schema[i].name%>.node.width.animVal.value) + " " + (listingCheckBox_<%= model_schema[i].name%>.node.y.animVal.value - 2);
var listing_tick_<%= model_schema[i].name%> = <%= model_schema[i].name%>.path(listing_tick_path_<%= model_schema[i].name%>);
listing_tick_<%= model_schema[i].name%>.click(listingCheckBoxClick_<%= model_schema[i].name%>);
listing_tick_<%= model_schema[i].name%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside create check_box...
var update_tick_path_<%= model_schema[i].name%> = "M " + (updateCheckBox_<%= model_schema[i].name%>.node.x.animVal.value + 1) + " " + (updateCheckBox_<%= model_schema[i].name%>.node.y.animVal.value + 6) + "L " + (updateCheckBox_<%= model_schema[i].name%>.node.x.animVal.value + 5) + " " + (updateCheckBox_<%= model_schema[i].name%>.node.y.animVal.value + 10) + "L " + (updateCheckBox_<%= model_schema[i].name%>.node.x.animVal.value + updateCheckBox_<%= model_schema[i].name%>.node.width.animVal.value) + " " + (updateCheckBox_<%= model_schema[i].name%>.node.y.animVal.value - 2);
var update_tick_<%= model_schema[i].name%> = <%= model_schema[i].name%>.path(update_tick_path_<%= model_schema[i].name%>);
update_tick_<%= model_schema[i].name%>.click(listingCheckBoxClick_<%= model_schema[i].name%>);
update_tick_<%= model_schema[i].name%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside create check_box...
var deleate_tick_path_<%= model_schema[i].name%> = "M " + (deleateCheckBox_<%= model_schema[i].name%>.node.x.animVal.value + 1) + " " + (deleateCheckBox_<%= model_schema[i].name%>.node.y.animVal.value + 6) + "L " + (deleateCheckBox_<%= model_schema[i].name%>.node.x.animVal.value + 5) + " " + (deleateCheckBox_<%= model_schema[i].name%>.node.y.animVal.value + 10) + "L " + (deleateCheckBox_<%= model_schema[i].name%>.node.x.animVal.value + deleateCheckBox_<%= model_schema[i].name%>.node.width.animVal.value) + " " + (deleateCheckBox_<%= model_schema[i].name%>.node.y.animVal.value - 2);
var deleate_tick_<%= model_schema[i].name%> = <%= model_schema[i].name%>.path(deleate_tick_path_<%= model_schema[i].name%>);
deleate_tick_<%= model_schema[i].name%>.click(listingCheckBoxClick_<%= model_schema[i].name%>);
deleate_tick_<%= model_schema[i].name%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});

var crud_opt_group_<%= model_schema[i].name%> = <%= model_schema[i].name%>.group(crud_opt_<%= model_schema[i].name%>, create_<%= model_schema[i].name%>, listing_<%= model_schema[i].name%>, update_<%= model_schema[i].name%>, deleate_<%= model_schema[i].name%>, createCheckBox_<%= model_schema[i].name%>, listingCheckBox_<%= model_schema[i].name%>, updateCheckBox_<%= model_schema[i].name%>, deleateCheckBox_<%= model_schema[i].name%>, create_tick_<%= model_schema[i].name%>, listing_tick_<%= model_schema[i].name%>, update_tick_<%= model_schema[i].name%>, deleate_tick_<%= model_schema[i].name%>);
crud_opt_group_<%= model_schema[i].name%>.attr({
    'display': 'none'
})

//relative modals svg...
<% if (belongsTo.length != 0){ for (var j=0;j< belongsTo.length ; j++){%>
var <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = Snap("#<%= model_schema[i].name %>");

//modal rectangle...
var drag_title_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = Snap.parse('<title>Drag and Drop here related model if exist for generate relation inside form</title>');

var block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.rect(20, 20, 150, 100, 5, 5);
block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    x: (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 200),
    width : (block_<%= model_schema[i].name%>.node.width.animVal.value),
    fill: "rgb(236, 240, 241)",
    stroke: "#1f2c39",
    strokeWidth: 1,
    'stroke-dasharray': 5 
});

<%if (j > 0){%>
    block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
        y: (block_<%= belongsTo[j-1].relations.model.toLowerCase()%>_belongsTo<%=j-1%>.node.y.animVal.value + block_<%= belongsTo[j-1].relations.model.toLowerCase()%>_belongsTo<%=j-1%>.node.height.animVal.value + 20)
    });
<%};
if (hasManyThrough.length > 0 || hasAndBelongsToMany.length > 0){%>
    block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
        x: (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 570)
    });
<%}%>
block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.append(drag_title_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);


//modal text populate inside modal rect...
var text_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.text(0, 0, "<%= belongsTo[j].relations.model.toUpperCase().substring(0 , 25) %>!");
text_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    x: block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 10,
    y: block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 20,
    'font-size': 13
});
// line separates modal head and body...
var line_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.line(0, 0, 0, 0);
line_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    x1: block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value,
    y1: Number(text_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.attributes.y.nodeValue) + 5,
    x2: block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.width.animVal.value,
    y2: Number(text_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.attributes.y.nodeValue) + 5,
    stroke: "#1f2c39",
    strokeWidth: 1,
    strokeLinecap: "round"
});

// change coordinates of line and mode1_rect according to text
/*<!--block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    width: Number(text_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.attributes.x.value) + (Number(text_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.textContent.length) * 10 + 30)
});
line_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    x2: (block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.width.animVal.value + block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value)
})-->*/

//tooltip on checkbox...
var select_title_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = Snap.parse('<title>Click here to select model for CRUD Operations , if unchecked Crud form are not created</title>');

//select box checked when modal form is created
var select_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.rect(0, 0, 15, 15, 2, 2);
select_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    x: (block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.width.animVal.value + block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value - 10),
    y: (block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value - 10),
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 2
});
select_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.append(select_title_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);

//check symbol inside select box...
var tick_path_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = "M " + (select_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 3) + " " + (select_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 5) + "L " + (select_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 7) + " " + (select_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 10) + "L " + (select_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + select_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.width.animVal.value) + " " + (select_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value - 3);
var tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.path(tick_path_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>)
tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});

//check and uncheck function on checkbox...
var checked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = false;
var selectCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = function () {
    if (!checked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>) {
        crud_opt_group_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
            'display': 'block'
        })
        tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({ display : "block"});
        block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({ x : (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 200)});
        checked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = true;
    } else if (checked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>) {
        crud_opt_group_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
            'display': 'none'
        })
        tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({ display : "none"});
        checked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = false;
    }
};
select_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.click(selectCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);
tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.click(selectCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);

//Crud Rect...
var crud_opt_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.rect(0, 0, 80, 90, 5, 5);
crud_opt_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    x: (select_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 15),
    y: (select_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 20),
    fill: "white",
    stroke: "#1f2c39",
    'stroke-dasharray': 10
})

//Crud options inside Crud_opt rect...
var create_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.text(0, 0, "-   create");
create_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    x: (crud_opt_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 5),
    y: (crud_opt_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 20),
    'font-size': 15
});
var listing_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.text(0, 0, "-   Listing");
listing_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    x: (crud_opt_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 5),
    y: (crud_opt_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 40),
    'font-size': 15
});
var update_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.text(0, 0, "-   update");
update_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    x: (crud_opt_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 5),
    y: (crud_opt_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 60),
    'font-size': 15
});
var deleate_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.text(0, 0, "-   delete");
deleate_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    x: (crud_opt_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 5),
    y: (crud_opt_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 80),
    'font-size': 15
});

//check and uncheck Crud options functions...
var createCheckBoxClicked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = false;
var createCheckBoxClick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = function () {
    if (!createCheckBoxClicked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>) {
        create_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
            display: "block"
        });
        createCheckBoxClicked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = true;
    } else if (createCheckBoxClicked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>) {
        create_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
            display: "none"
        });
        createCheckBoxClicked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = false;
    }
}

//listing check all three remaining options include listing , delete , edit
var listingCheckBoxClicked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = false;
var listingCheckBoxClick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = function () {
    if (!listingCheckBoxClicked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>) {
        listing_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
            display: "block"
        });
        update_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
            display: "block"
        });
        deleate_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
            display: "block"
        });
        listingCheckBoxClicked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = true;
    } else if (listingCheckBoxClicked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>) {
        listing_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
            display: "none"
        });
        update_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
            display: "none"
        });
        deleate_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
            display: "none"
        });
        listingCheckBoxClicked_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = false;
    }
}

//now set checkboxes on front of Crud operations...
var createCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.rect(0, 0, 12, 12, 1, 1);
createCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    x: (Number(create_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.attributes.x.nodeValue) + 60),
    y: (create_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
});
createCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.click(createCheckBoxClick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);
var listingCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.rect(0, 0, 12, 12, 1, 1);
listingCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    x: (Number(listing_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.attributes.x.nodeValue) + 60),
    y: (listing_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
})
listingCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.click(listingCheckBoxClick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);
var updateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.rect(0, 0, 12, 12, 1, 1);
updateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    x: (Number(update_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.attributes.x.nodeValue) + 60),
    y: (update_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
});
updateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.click(listingCheckBoxClick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);
var deleateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.rect(0, 0, 12, 12, 1, 1);
deleateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    x: (Number(deleate_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.attributes.x.nodeValue) + 60),
    y: (deleate_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
})
deleateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.click(listingCheckBoxClick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);

//tick inside create check_box...
var create_tick_path_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = "M " + (createCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 1) + " " + (createCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 6) + "L " + (createCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 5) + " " + (createCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 10) + "L " + (createCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + createCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.width.animVal.value) + " " + (createCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value - 2);
var create_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.path(create_tick_path_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);
create_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.click(createCheckBoxClick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);
create_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside listing check_box...
var listing_tick_path_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = "M " + (listingCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 1) + " " + (listingCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 6) + "L " + (listingCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 5) + " " + (listingCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 10) + "L " + (listingCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + listingCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.width.animVal.value) + " " + (listingCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value - 2);
var listing_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.path(listing_tick_path_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);
listing_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.click(listingCheckBoxClick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);
listing_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside create check_box...
var update_tick_path_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = "M " + (updateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 1) + " " + (updateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 6) + "L " + (updateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 5) + " " + (updateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 10) + "L " + (updateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + updateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.width.animVal.value) + " " + (updateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value - 2);
var update_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.path(update_tick_path_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);
update_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.click(listingCheckBoxClick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);
update_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside create check_box...
var deleate_tick_path_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = "M " + (deleateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 1) + " " + (deleateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 6) + "L " + (deleateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + 5) + " " + (deleateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 10) + "L " + (deleateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value + deleateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.width.animVal.value) + " " + (deleateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value - 2);
var deleate_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.path(deleate_tick_path_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);
deleate_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.click(listingCheckBoxClick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);
deleate_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});

var crud_opt_group_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%> = <%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.group(crud_opt_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>, create_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>, listing_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>, update_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>, deleate_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>, createCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>, listingCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>, updateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>, deleateCheckBox_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>, create_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>, listing_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>, update_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>, deleate_tick_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>);
crud_opt_group_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.attr({
    'display': 'none'
})

var <%= model_schema[i].name %>To<%= belongsTo[j].relations.model %>Path = "M " + (block_<%= model_schema[i].name %>.node.x.animVal.value + block_<%= model_schema[i].name %>.node.width.animVal.value ) + " " + (block_<%= model_schema[i].name %>.node.y.animVal.value + 50) + "H " + (block_<%= model_schema[i].name %>.node.x.animVal.value + block_<%= model_schema[i].name %>.node.width.animVal.value + 20)+ "V " +  (block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value + 50) + "H " +  (block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value);
var <%= model_schema[i].name %>To<%= belongsTo[j].relations.model %> = <%= model_schema[i].name %>.path(<%= model_schema[i].name %>To<%= belongsTo[j].relations.model %>Path);
<%= model_schema[i].name %>To<%= belongsTo[j].relations.model %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1
})

//polygon {Arrow at end of line toward related model}
var <%= model_schema[i].name %>To<%= belongsTo[j].relations.model %>ArrowPoints = [block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value,(block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value+50),(block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value-10),(block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value+50-10),(block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value-10),(block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value+50+10)];
var <%= model_schema[i].name %>To<%= belongsTo[j].relations.model %>Arrow = <%= model_schema[i].name %>.polygon(<%= model_schema[i].name %>To<%= belongsTo[j].relations.model %>ArrowPoints);
<%= model_schema[i].name %>To<%= belongsTo[j].relations.model %>Arrow.attr({
    fill: "#1f2c39",
    stroke: "#1f2c39",
    strokeWidth: 1,
});

//relation type on top of arrow head {text}...
var <%= model_schema[i].name %>To<%= belongsTo[j].relations.model %>relationType = <%= model_schema[i].name %>.text(0, 0, "Belongsto");
<%= model_schema[i].name %>To<%= belongsTo[j].relations.model %>relationType.attr({
    x : (block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.x.animVal.value - 120),
    y : (block_<%= belongsTo[j].relations.model.toLowerCase() %>_belongsTo<%= j%>.node.y.animVal.value+40),
    stroke: "#8a8a8a",
})
//prepend relation type text...
<%= model_schema[i].name %>To<%= belongsTo[j].relations.model %>relationType.prependTo(Snap(<%= model_schema[i].name%>));

//now prepend these line, because these line overlap components come after it...
<%= model_schema[i].name %>To<%= belongsTo[j].relations.model %>.prependTo(Snap(<%= model_schema[i].name%>));

<%}}; belongsToCounter = belongsTo.length-1; if (hasMany.length != 0){ for (var j=0;j< hasMany.length ; j++){%>
var <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = Snap("#<%= model_schema[i].name %>");

//modal rectangle...
var drag_title_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = Snap.parse('<title>Drag and Drop here related model if exist for generate relation inside form</title>');

var block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.rect(20, 20, 150, 100, 5, 5);
block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x: (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 200),
    width : (block_<%= model_schema[i].name%>.node.width.animVal.value),
    fill: "rgb(236, 240, 241)",
    stroke: "#1f2c39",
    strokeWidth: 1,
    'stroke-dasharray': 5 
});
<%if (j == 0 && belongsToCounter >= 0){%>
block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    y: (block_<%= belongsTo[belongsToCounter].relations.model.toLowerCase()%>_belongsTo<%=belongsToCounter%>.node.y.animVal.value + block_<%= belongsTo[belongsToCounter].relations.model.toLowerCase()%>_belongsTo<%=belongsToCounter%>.node.height.animVal.value + 20)
});
<%}%>
<%if (j > 0){%>
block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    y: (block_<%= hasMany[j-1].relations.model.toLowerCase()%>_hasMany<%=j-1%>.node.y.animVal.value + block_<%= hasMany[j-1].relations.model.toLowerCase()%>_hasMany<%=j-1%>.node.height.animVal.value + 20)
});
<%}
if (hasManyThrough.length > 0 || hasAndBelongsToMany.length > 0){%>
block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x: (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 570)
});
<%}%>
block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.append(drag_title_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);


//modal text populate inside modal rect...
var text_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.text(0, 0, "<%= hasMany[j].relations.model.toUpperCase().substring(0 , 25) %>!");
text_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x: block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 10,
    y: block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 20,
    'font-size': 13
});
// line separates modal head and body...
var line_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.line(0, 0, 0, 0);
line_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x1: block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value,
    y1: Number(text_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.attributes.y.nodeValue) + 5,
    x2: block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.width.animVal.value,
    y2: Number(text_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.attributes.y.nodeValue) + 5,
    stroke: "#1f2c39",
    strokeWidth: 1,
    strokeLinecap: "round"
});

// change coordinates of line and mode1_rect according to text
/*<!--block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    width: Number(text_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.attributes.x.value) + (Number(text_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.textContent.length) * 10 + 30)
});
line_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x2: (block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.width.animVal.value + block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value)
})-->*/

//tooltip on checkbox...
var select_title_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = Snap.parse('<title>Click here to select model for CRUD Operations , if unchecked Crud form are not created</title>');

//select box checked when modal form is created
var select_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.rect(0, 0, 15, 15, 2, 2);
select_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x: (block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.width.animVal.value + block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value - 10),
    y: (block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value - 10),
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 2
});
select_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.append(select_title_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);

//check symbol inside select box...
var tick_path_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = "M " + (select_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 3) + " " + (select_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 5) + "L " + (select_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 7) + " " + (select_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 10) + "L " + (select_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + select_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.width.animVal.value) + " " + (select_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value - 3);
var tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.path(tick_path_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>)
tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});

//check and uncheck function on checkbox...
var checked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = false;
var selectCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = function () {
    if (!checked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>) {
        crud_opt_group_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
            'display': 'block'
        })
        tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({ display : "block"});
        block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({ x : (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 200)});
        checked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = true;
    } else if (checked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>) {
        crud_opt_group_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
            'display': 'none'
        })
        tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({ display : "none"});
        checked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = false;
    }
};
select_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.click(selectCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);
tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.click(selectCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);

//Crud Rect...
var crud_opt_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.rect(0, 0, 80, 90, 5, 5);
crud_opt_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x: (select_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 15),
    y: (select_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 20),
    fill: "white",
    stroke: "#1f2c39",
    'stroke-dasharray': 10
})

//Crud options inside Crud_opt rect...
var create_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.text(0, 0, "-   create");
create_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x: (crud_opt_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 20),
    'font-size': 15
});
var listing_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.text(0, 0, "-   Listing");
listing_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x: (crud_opt_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 40),
    'font-size': 15
});
var update_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.text(0, 0, "-   update");
update_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x: (crud_opt_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 60),
    'font-size': 15
});
var deleate_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.text(0, 0, "-   delete");
deleate_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x: (crud_opt_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 80),
    'font-size': 15
});

//check and uncheck Crud options functions...
var createCheckBoxClicked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = false;
var createCheckBoxClick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = function () {
    if (!createCheckBoxClicked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>) {
        create_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
            display: "block"
        });
        createCheckBoxClicked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = true;
    } else if (createCheckBoxClicked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>) {
        create_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
            display: "none"
        });
        createCheckBoxClicked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = false;
    }
}

//listing check all three remaining options include listing , delete , edit
var listingCheckBoxClicked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = false;
var listingCheckBoxClick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = function () {
    if (!listingCheckBoxClicked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>) {
        listing_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
            display: "block"
        });
        update_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
            display: "block"
        });
        deleate_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
            display: "block"
        });
        listingCheckBoxClicked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = true;
    } else if (listingCheckBoxClicked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>) {
        listing_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
            display: "none"
        });
        update_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
            display: "none"
        });
        deleate_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
            display: "none"
        });
        listingCheckBoxClicked_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = false;
    }
}

//now set checkboxes on front of Crud operations...
var createCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.rect(0, 0, 12, 12, 1, 1);
createCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x: (Number(create_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (create_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
});
createCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.click(createCheckBoxClick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);
var listingCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.rect(0, 0, 12, 12, 1, 1);
listingCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x: (Number(listing_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (listing_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
})
listingCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.click(listingCheckBoxClick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);
var updateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.rect(0, 0, 12, 12, 1, 1);
updateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x: (Number(update_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (update_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
});
updateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.click(listingCheckBoxClick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);
var deleateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.rect(0, 0, 12, 12, 1, 1);
deleateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    x: (Number(deleate_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (deleate_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
})
deleateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.click(listingCheckBoxClick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);

//tick inside create check_box...
var create_tick_path_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = "M " + (createCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 1) + " " + (createCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 6) + "L " + (createCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 5) + " " + (createCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 10) + "L " + (createCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + createCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.width.animVal.value) + " " + (createCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value - 2);
var create_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.path(create_tick_path_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);
create_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.click(createCheckBoxClick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);
create_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside listing check_box...
var listing_tick_path_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = "M " + (listingCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 1) + " " + (listingCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 6) + "L " + (listingCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 5) + " " + (listingCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 10) + "L " + (listingCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + listingCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.width.animVal.value) + " " + (listingCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value - 2);
var listing_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.path(listing_tick_path_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);
listing_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.click(listingCheckBoxClick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);
listing_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside create check_box...
var update_tick_path_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = "M " + (updateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 1) + " " + (updateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 6) + "L " + (updateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 5) + " " + (updateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 10) + "L " + (updateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + updateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.width.animVal.value) + " " + (updateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value - 2);
var update_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.path(update_tick_path_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);
update_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.click(listingCheckBoxClick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);
update_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside create check_box...
var deleate_tick_path_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = "M " + (deleateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 1) + " " + (deleateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 6) + "L " + (deleateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + 5) + " " + (deleateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 10) + "L " + (deleateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value + deleateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.width.animVal.value) + " " + (deleateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value - 2);
var deleate_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.path(deleate_tick_path_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);
deleate_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.click(listingCheckBoxClick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);
deleate_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});

var crud_opt_group_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %> = <%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.group(crud_opt_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>, create_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>, listing_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>, update_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>, deleate_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>, createCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>, listingCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>, updateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>, deleateCheckBox_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>, create_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>, listing_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>, update_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>, deleate_tick_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>);
crud_opt_group_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.attr({
    'display': 'none'
})

var <%= model_schema[i].name %>To<%= hasMany[j].relations.model %>Path = "M " + (block_<%= model_schema[i].name %>.node.x.animVal.value + block_<%= model_schema[i].name %>.node.width.animVal.value ) + " " + (block_<%= model_schema[i].name %>.node.y.animVal.value + 50) + "H " + (block_<%= model_schema[i].name %>.node.x.animVal.value + block_<%= model_schema[i].name %>.node.width.animVal.value + 20) + "V " +  (block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.y.animVal.value + 50) + "H " +  (block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j %>.node.x.animVal.value);
var <%= model_schema[i].name %>To<%= hasMany[j].relations.model %> = <%= model_schema[i].name %>.path(<%= model_schema[i].name %>To<%= hasMany[j].relations.model %>Path);
<%= model_schema[i].name %>To<%= hasMany[j].relations.model %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1
})
//polygon {Arrow at end of line toward related model}
var <%= model_schema[i].name %>To<%= hasMany[j].relations.model %>ArrowPoints = [block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j%>.node.x.animVal.value,(block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j%>.node.y.animVal.value+50),(block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j%>.node.x.animVal.value-10),(block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j%>.node.y.animVal.value+50-10),(block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j%>.node.x.animVal.value-10),(block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j%>.node.y.animVal.value+50+10)];
var <%= model_schema[i].name %>To<%= hasMany[j].relations.model %>Arrow = <%= model_schema[i].name %>.polygon(<%= model_schema[i].name %>To<%= hasMany[j].relations.model %>ArrowPoints);
<%= model_schema[i].name %>To<%= hasMany[j].relations.model %>Arrow.attr({
    fill: "#1f2c39",
    stroke: "#1f2c39",
    strokeWidth: 1,
});

//relation type on top of arrow head {text}...
var <%= model_schema[i].name %>To<%= hasMany[j].relations.model %>relationType = <%= model_schema[i].name %>.text(0, 0, "HasMany");
<%= model_schema[i].name %>To<%= hasMany[j].relations.model %>relationType.attr({
    x : (block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j%>.node.x.animVal.value - 120),
    y : (block_<%= hasMany[j].relations.model.toLowerCase() %>_hasMany<%= j%>.node.y.animVal.value+40),
    stroke: "#8a8a8a"
})

//prepend relation type text...
<%= model_schema[i].name %>To<%= hasMany[j].relations.model %>relationType.prependTo(Snap(<%= model_schema[i].name%>));

//now prepend the lines because these lines overlap components come after it...
<%= model_schema[i].name %>To<%= hasMany[j].relations.model %>.prependTo(Snap(<%= model_schema[i].name%>));

<%}}; hasManyCounter= hasMany.length-1;if (hasOne.length != 0){for (var j=0;j< hasOne.length ; j++){%>
var <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = Snap("#<%= model_schema[i].name %>");

//modal rectangle...
var drag_title_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = Snap.parse('<title>Drag and Drop here related model if exist for generate relation inside form</title>');

var block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.rect(20, 20, 150, 100, 5, 5);
block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x: (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 200),
    width : (block_<%= model_schema[i].name%>.node.width.animVal.value),
    fill: "rgb(236, 240, 241)",
    stroke: "#1f2c39",
    strokeWidth: 1,
    'stroke-dasharray': 5 
});

<% if (j == 0 && hasManyCounter >= 0){%>
block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    y: (block_<%= hasMany[hasManyCounter].relations.model.toLowerCase()%>_hasMany<%=hasManyCounter%>.node.y.animVal.value + block_<%= hasMany[hasManyCounter].relations.model.toLowerCase()%>_hasMany<%=hasManyCounter%>.node.height.animVal.value + 20)
});
<%} if (j ==0 && hasManyCounter < 0 && belongsToCounter >= 0){%>
block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    y: (block_<%= belongsTo[belongsToCounter].relations.model.toLowerCase()%>_belongsTo<%=belongsToCounter%>.node.y.animVal.value + block_<%= belongsTo[belongsToCounter].relations.model.toLowerCase()%>_belongsTo<%=belongsToCounter%>.node.height.animVal.value + 20)
});
<%}if (j > 0){%>
block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    y: (block_<%= hasOne[j-1].relations.model.toLowerCase()%>_hasOne<%=j-1%>.node.y.animVal.value + block_<%= hasOne[j-1].relations.model.toLowerCase()%>_hasOne<%=j-1%>.node.height.animVal.value + 20)
});
<%}if (hasManyThrough.length > 0 || hasAndBelongsToMany.length > 0){%>
block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x: (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 570)
});
<%}%>
block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.append(drag_title_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);


//modal text populate inside modal rect...
var text_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.text(0, 0, "<%= hasOne[j].relations.model.toUpperCase().substring(0 , 25) %>!");
text_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x: block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 10,
    y: block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 20,
    'font-size': 13
});
// line separates modal head and body...
var line_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.line(0, 0, 0, 0);
line_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x1: block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value,
    y1: Number(text_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.attributes.y.nodeValue) + 5,
    x2: block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.width.animVal.value,
    y2: Number(text_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.attributes.y.nodeValue) + 5,
    stroke: "#1f2c39",
    strokeWidth: 1,
    strokeLinecap: "round"
});

// change coordinates of line and mode1_rect according to text
/*<!--block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    width: Number(text_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.attributes.x.value) + (Number(text_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.textContent.length) * 10 + 30)
});
line_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x2: (block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.width.animVal.value + block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value)
})-->*/

//tooltip on checkbox...
var select_title_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = Snap.parse('<title>Click here to select model for CRUD Operations , if unchecked Crud form are not created</title>');

//select box checked when modal form is created
var select_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.rect(0, 0, 15, 15, 2, 2);
select_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x: (block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.width.animVal.value + block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value - 10),
    y: (block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value - 10),
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 2
});
select_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.append(select_title_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);

//check symbol inside select box...
var tick_path_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = "M " + (select_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 3) + " " + (select_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 5) + "L " + (select_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 7) + " " + (select_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 10) + "L " + (select_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + select_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.width.animVal.value) + " " + (select_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value - 3);
var tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.path(tick_path_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>)
tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});

//check and uncheck function on checkbox...
var checked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = false;
var selectCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = function () {
    if (!checked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>) {
        crud_opt_group_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
            'display': 'block'
        })
        tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({ display : "block"});
        block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({ x : (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 200)});
        checked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = true;
    } else if (checked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>) {
        crud_opt_group_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
            'display': 'none'
        })
        tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({ display : "none"});
        checked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = false;
    }
};
select_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.click(selectCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);
tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.click(selectCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);

//Crud Rect...
var crud_opt_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.rect(0, 0, 80, 90, 5, 5);
crud_opt_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x: (select_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 15),
    y: (select_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 20),
    fill: "white",
    stroke: "#1f2c39",
    'stroke-dasharray': 10
})

//Crud options inside Crud_opt rect...
var create_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.text(0, 0, "-   create");
create_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x: (crud_opt_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 20),
    'font-size': 15
});
var listing_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.text(0, 0, "-   Listing");
listing_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x: (crud_opt_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 40),
    'font-size': 15
});
var update_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.text(0, 0, "-   update");
update_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x: (crud_opt_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 60),
    'font-size': 15
});
var deleate_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.text(0, 0, "-   delete");
deleate_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x: (crud_opt_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 80),
    'font-size': 15
});

//check and uncheck Crud options functions...
var createCheckBoxClicked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = false;
var createCheckBoxClick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = function () {
    if (!createCheckBoxClicked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>) {
        create_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
            display: "block"
        });
        createCheckBoxClicked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = true;
    } else if (createCheckBoxClicked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>) {
        create_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
            display: "none"
        });
        createCheckBoxClicked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = false;
    }
}

//listing check all three remaining options include listing , delete , edit
var listingCheckBoxClicked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = false;
var listingCheckBoxClick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = function () {
    if (!listingCheckBoxClicked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>) {
        listing_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
            display: "block"
        });
        update_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
            display: "block"
        });
        deleate_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
            display: "block"
        });
        listingCheckBoxClicked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = true;
    } else if (listingCheckBoxClicked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>) {
        listing_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
            display: "none"
        });
        update_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
            display: "none"
        });
        deleate_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
            display: "none"
        });
        listingCheckBoxClicked_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = false;
    }
}

//now set checkboxes on front of Crud operations...
var createCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.rect(0, 0, 12, 12, 1, 1);
createCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x: (Number(create_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (create_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
});
createCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.click(createCheckBoxClick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);
var listingCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.rect(0, 0, 12, 12, 1, 1);
listingCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x: (Number(listing_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (listing_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
})
listingCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.click(listingCheckBoxClick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);
var updateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.rect(0, 0, 12, 12, 1, 1);
updateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x: (Number(update_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (update_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
});
updateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.click(listingCheckBoxClick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);
var deleateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.rect(0, 0, 12, 12, 1, 1);
deleateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    x: (Number(deleate_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (deleate_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
})
deleateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.click(listingCheckBoxClick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);

//tick inside create check_box...
var create_tick_path_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = "M " + (createCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 1) + " " + (createCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 6) + "L " + (createCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 5) + " " + (createCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 10) + "L " + (createCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + createCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.width.animVal.value) + " " + (createCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value - 2);
var create_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.path(create_tick_path_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);
create_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.click(createCheckBoxClick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);
create_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside listing check_box...
var listing_tick_path_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = "M " + (listingCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 1) + " " + (listingCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 6) + "L " + (listingCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 5) + " " + (listingCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 10) + "L " + (listingCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + listingCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.width.animVal.value) + " " + (listingCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value - 2);
var listing_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.path(listing_tick_path_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);
listing_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.click(listingCheckBoxClick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);
listing_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside create check_box...
var update_tick_path_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = "M " + (updateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 1) + " " + (updateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 6) + "L " + (updateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 5) + " " + (updateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 10) + "L " + (updateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + updateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.width.animVal.value) + " " + (updateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value - 2);
var update_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.path(update_tick_path_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);
update_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.click(listingCheckBoxClick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);
update_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside create check_box...
var deleate_tick_path_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = "M " + (deleateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 1) + " " + (deleateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 6) + "L " + (deleateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + 5) + " " + (deleateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 10) + "L " + (deleateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value + deleateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.width.animVal.value) + " " + (deleateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value - 2);
var deleate_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.path(deleate_tick_path_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);
deleate_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.click(listingCheckBoxClick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);
deleate_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});

var crud_opt_group_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %> = <%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.group(crud_opt_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>, create_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>, listing_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>, update_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>, deleate_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>, createCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>, listingCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>, updateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>, deleateCheckBox_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>, create_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>, listing_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>, update_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>, deleate_tick_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>);
crud_opt_group_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.attr({
    'display': 'none'
})


var <%= model_schema[i].name %>To<%= hasOne[j].relations.model %>Path = "M " + (block_<%= model_schema[i].name %>.node.x.animVal.value + block_<%= model_schema[i].name %>.node.width.animVal.value ) + " " + (block_<%= model_schema[i].name %>.node.y.animVal.value + 50) + "H " + (block_<%= model_schema[i].name %>.node.x.animVal.value + block_<%= model_schema[i].name %>.node.width.animVal.value + 20)+ "V " +  (block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.y.animVal.value + 50) + "H " +  (block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j %>.node.x.animVal.value); 
var <%= model_schema[i].name %>To<%= hasOne[j].relations.model %> = <%= model_schema[i].name %>.path(<%= model_schema[i].name %>To<%= hasOne[j].relations.model %>Path);
<%= model_schema[i].name %>To<%= hasOne[j].relations.model %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1
})
//polygon {Arrow at end of line toward related model}
var <%= model_schema[i].name %>To<%= hasOne[j].relations.model %>ArrowPoints = [block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j%>.node.x.animVal.value,(block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j%>.node.y.animVal.value+50),(block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j%>.node.x.animVal.value-10),(block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j%>.node.y.animVal.value+50-10),(block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j%>.node.x.animVal.value-10),(block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j%>.node.y.animVal.value+50+10)];
var <%= model_schema[i].name %>To<%= hasOne[j].relations.model %>Arrow = <%= model_schema[i].name %>.polygon(<%= model_schema[i].name %>To<%= hasOne[j].relations.model %>ArrowPoints);
<%= model_schema[i].name %>To<%= hasOne[j].relations.model %>Arrow.attr({
    fill: "#1f2c39",
    stroke: "#1f2c39",
    strokeWidth: 1,
});

//relation type on top of arrow head {text}...
var <%= model_schema[i].name %>To<%= hasOne[j].relations.model %>relationType = <%= model_schema[i].name %>.text(0, 0, "HasOne");
<%= model_schema[i].name %>To<%= hasOne[j].relations.model %>relationType.attr({
    x : (block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j%>.node.x.animVal.value - 120),
    y : (block_<%= hasOne[j].relations.model.toLowerCase() %>_hasOne<%= j%>.node.y.animVal.value+40),
    stroke: "#8a8a8a"
})
//now prepend relation type text...
<%= model_schema[i].name %>To<%= hasOne[j].relations.model %>relationType.prependTo(Snap(<%= model_schema[i].name%>));

//now prepend the lines because these lines overlap components come after it...
<%= model_schema[i].name %>To<%= hasOne[j].relations.model %>.prependTo(Snap(<%= model_schema[i].name%>));
<%}}; hasOneCounter= hasOne.length-1;if (hasManyThrough.length > 0){ for (var j=0;j< hasManyThrough.length ; j++){%>

var <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = Snap("#<%= model_schema[i].name %>");

//modal rectangle...
var drag_title_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = Snap.parse('<title>Drag and Drop here related model if exist for generate relation inside form</title>');

var block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.rect(20, 20, 150, 100, 5, 5);
block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    x: (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 570),
    width : (block_<%= model_schema[i].name%>.node.width.animVal.value),
    fill: "rgb(236, 240, 241)",
    stroke: "#1f2c39",
    strokeWidth: 1,
    'stroke-dasharray': 5 
});

<% if (j == 0 && hasOneCounter >= 0){%>
block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    y: (block_<%= hasOne[hasOneCounter].relations.model.toLowerCase()%>_hasOne<%=hasOneCounter%>.node.y.animVal.value + block_<%= hasOne[hasOneCounter].relations.model.toLowerCase()%>_hasOne<%=hasOneCounter%>.node.height.animVal.value + 20)
});
<%} if (j ==0 && hasOneCounter < 0 && hasManyCounter >= 0){%>
block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    y: (block_<%= hasMany[hasManyCounter].relations.model.toLowerCase()%>_hasMany<%=hasManyCounter%>.node.y.animVal.value + block_<%= hasMany[hasManyCounter].relations.model.toLowerCase()%>_hasMany<%=hasManyCounter%>.node.height.animVal.value + 20)
});
<%} if (j ==0 && hasOneCounter < 0 && hasManyCounter < 0 && belongsToCounter >= 0){%>
block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    y: (block_<%= belongsTo[belongsToCounter].relations.model.toLowerCase()%>_belongsTo<%=belongsToCounter%>.node.y.animVal.value + block_<%= belongsTo[belongsToCounter].relations.model.toLowerCase()%>_belongsTo<%=belongsToCounter%>.node.height.animVal.value + 20)});
<%}if (j > 0){%>
block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    y: (block_<%= hasManyThrough[j-1].relations.model.toLowerCase()%>_hasManyThrough<%=j-1%>.node.y.animVal.value + block_<%= hasManyThrough[j-1].relations.model.toLowerCase()%>_hasManyThrough<%=j-1%>.node.height.animVal.value + 80)
});
<%}%>
block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.append(drag_title_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);

//modal text populate inside modal rect...
var text_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.text(0, 0, "<%= hasManyThrough[j].relations.model.toUpperCase().substring(0 , 25) %>!");
text_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    x: block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 10,
    y: block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 20,
    'font-size': 13
});
// line separates modal head and body...
var line_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.line(0, 0, 0, 0);
line_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    x1: block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value,
    y1: Number(text_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.attributes.y.nodeValue) + 5,
    x2: block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.width.animVal.value,
    y2: Number(text_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.attributes.y.nodeValue) + 5,
    stroke: "#1f2c39",
    strokeWidth: 1,
    strokeLinecap: "round"
});

// change coordinates of line and mode1_rect according to text
/*<!--block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    width: Number(text_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.attributes.x.value) + (Number(text_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.textContent.length) * 10 + 30)
});
line_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    x2: (block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.width.animVal.value + block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value)
})-->*/

//tooltip on checkbox...
var select_title_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = Snap.parse('<title>Click here to select model for CRUD Operations , if unchecked Crud form are not created</title>');

//select box checked when modal form is created
var select_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.rect(0, 0, 15, 15, 2, 2);
select_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    x: (block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.width.animVal.value + block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value - 10),
    y: (block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value - 10),
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 2
});
select_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.append(select_title_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);

//check symbol inside select box...
var tick_path_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = "M " + (select_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 3) + " " + (select_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 5) + "L " + (select_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 7) + " " + (select_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 10) + "L " + (select_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + select_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.width.animVal.value) + " " + (select_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value - 3);
var tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.path(tick_path_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>)
tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});

//check and uncheck function on checkbox...
var checked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = false;
var selectCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = function () {
    if (!checked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>) {
        crud_opt_group_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
            'display': 'block'
        })
        tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({ display : "block"});
        block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({ x : (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 570)});
        checked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = true;
    } else if (checked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>) {
        crud_opt_group_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
            'display': 'none'
        })
        tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({ display : "none"});
        checked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = false;
    }
};
select_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.click(selectCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);
tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.click(selectCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);

//Crud Rect...
var crud_opt_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.rect(0, 0, 80, 90, 5, 5);
crud_opt_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    x: (select_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 15),
    y: (select_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 20),
    fill: "white",
    stroke: "#1f2c39",
    'stroke-dasharray': 10
})

//Crud options inside Crud_opt rect...
var create_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.text(0, 0, "-   create");
create_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    x: (crud_opt_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 20),
    'font-size': 15
});
var listing_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.text(0, 0, "-   Listing");
listing_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    x: (crud_opt_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 40),
    'font-size': 15
});
var update_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.text(0, 0, "-   update");
update_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    x: (crud_opt_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 60),
    'font-size': 15
});
var deleate_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.text(0, 0, "-   delete");
deleate_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    x: (crud_opt_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 80),
    'font-size': 15
});

//check and uncheck Crud options functions...
var createCheckBoxClicked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = false;
var createCheckBoxClick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = function () {
    if (!createCheckBoxClicked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>) {
        create_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
            display: "block"
        });
        createCheckBoxClicked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = true;
    } else if (createCheckBoxClicked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>) {
        create_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
            display: "none"
        });
        createCheckBoxClicked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = false;
    }
}

//listing check all three remaining options include listing , delete , edit
var listingCheckBoxClicked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = false;
var listingCheckBoxClick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = function () {
    if (!listingCheckBoxClicked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>) {
        listing_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
            display: "block"
        });
        update_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
            display: "block"
        });
        deleate_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
            display: "block"
        });
        listingCheckBoxClicked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = true;
    } else if (listingCheckBoxClicked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>) {
        listing_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
            display: "none"
        });
        update_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
            display: "none"
        });
        deleate_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
            display: "none"
        });
        listingCheckBoxClicked_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = false;
    }
}

//now set checkboxes on front of Crud operations...
var createCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.rect(0, 0, 12, 12, 1, 1);
createCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    x: (Number(create_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (create_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
});
createCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.click(createCheckBoxClick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);
var listingCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.rect(0, 0, 12, 12, 1, 1);
listingCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    x: (Number(listing_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (listing_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
})
listingCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.click(listingCheckBoxClick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);
var updateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.rect(0, 0, 12, 12, 1, 1);
updateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    x: (Number(update_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (update_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
});
updateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.click(listingCheckBoxClick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);
var deleateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.rect(0, 0, 12, 12, 1, 1);
deleateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    x: (Number(deleate_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (deleate_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
})
deleateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.click(listingCheckBoxClick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);

//tick inside create check_box...
var create_tick_path_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = "M " + (createCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 1) + " " + (createCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 6) + "L " + (createCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 5) + " " + (createCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 10) + "L " + (createCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + createCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.width.animVal.value) + " " + (createCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value - 2);
var create_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.path(create_tick_path_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);
create_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.click(createCheckBoxClick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);
create_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside listing check_box...
var listing_tick_path_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = "M " + (listingCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 1) + " " + (listingCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 6) + "L " + (listingCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 5) + " " + (listingCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 10) + "L " + (listingCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + listingCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.width.animVal.value) + " " + (listingCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value - 2);
var listing_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.path(listing_tick_path_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);
listing_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.click(listingCheckBoxClick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);
listing_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside create check_box...
var update_tick_path_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = "M " + (updateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 1) + " " + (updateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 6) + "L " + (updateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 5) + " " + (updateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 10) + "L " + (updateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + updateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.width.animVal.value) + " " + (updateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value - 2);
var update_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.path(update_tick_path_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);
update_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.click(listingCheckBoxClick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);
update_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside create check_box...
var deleate_tick_path_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = "M " + (deleateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 1) + " " + (deleateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 6) + "L " + (deleateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + 5) + " " + (deleateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 10) + "L " + (deleateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value + deleateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.width.animVal.value) + " " + (deleateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value - 2);
var deleate_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.path(deleate_tick_path_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);
deleate_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.click(listingCheckBoxClick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);
deleate_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});

var crud_opt_group_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> = <%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.group(crud_opt_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>, create_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>, listing_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>, update_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>, deleate_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>, createCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>, listingCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>, updateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>, deleateCheckBox_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>, create_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>, listing_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>, update_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>, deleate_tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>);
crud_opt_group_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.attr({
    'display': 'none'
})

//now linked model in hasManyThrough relation
var <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = Snap("#<%= model_schema[i].name %>");

//modal rectangle...
var drag_title_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = Snap.parse('<title>Drag and Drop here related model if exist for generate relation inside form</title>');

var block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.rect(20, 20, 150, 100, 5, 5);
block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    x: (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 200),
    width : (block_<%= model_schema[i].name%>.node.width.animVal.value),
    fill: "rgb(236, 240, 241)",
    stroke: "#1f2c39",
    strokeWidth: 1,
    'stroke-dasharray': 5 
});

<% if (j == 0 && hasOneCounter >= 0){%>
block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    y: (block_<%= hasOne[hasOneCounter].relations.model.toLowerCase()%>_hasOne<%=hasOneCounter%>.node.y.animVal.value + block_<%= hasOne[hasOneCounter].relations.model.toLowerCase()%>_hasOne<%=hasOneCounter%>.node.height.animVal.value + 20)
});
<%} if (j ==0 && hasOneCounter < 0 && hasManyCounter >= 0){%>
block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    y: (block_<%= hasMany[hasManyCounter].relations.model.toLowerCase()%>_hasMany<%=hasManyCounter%>.node.y.animVal.value + block_<%= hasMany[hasManyCounter].relations.model.toLowerCase()%>_hasMany<%=hasManyCounter%>.node.height.animVal.value + 20)
});
<%} if (j ==0 && hasOneCounter < 0 && hasManyCounter < 0 && belongsToCounter >= 0){%>
block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    y: (block_<%= belongsTo[belongsToCounter].relations.model.toLowerCase()%>_belongsTo<%=belongsToCounter%>.node.y.animVal.value + block_<%= belongsTo[belongsToCounter].relations.model.toLowerCase()%>_belongsTo<%=belongsToCounter%>.node.height.animVal.value + 20)});
<%}%>
<%if (j > 0){%>
block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    y: (block_<%= hasManyThrough[j-1].relations.model.toLowerCase()%>_hasManyThrough<%=j-1%>.node.y.animVal.value + block_<%= hasManyThrough[j-1].relations.model.toLowerCase()%>_hasManyThrough<%=j-1%>.node.height.animVal.value + 80)
});
<%}%>
block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.append(drag_title_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);

//modal text populate inside modal rect...
var text_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.text(0, 0, "<%= hasManyThrough[j].relations.through.toUpperCase().substring(0 , 25) %>!");
text_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    x: block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 10,
    y: block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 20,
    'font-size': 13
});
/*// line separates modal head and body...
var line_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.line(0, 0, 0, 0);
line_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    x1: block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value,
    y1: Number(text_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.attributes.y.nodeValue) + 5,
    x2: block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.width.animVal.value,
    y2: Number(text_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.attributes.y.nodeValue) + 5,
    stroke: "#1f2c39",
    strokeWidth: 1,
    strokeLinecap: "round"
});
// change coordinates of line and mode1_rect according to text
block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    width: Number(text_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.attributes.x.value) + (Number(text_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.textContent.length) * 10 + 30)
});
line_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    x2: (block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.width.animVal.value + block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value)
})>*/

//tooltip on checkbox...
var select_title_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = Snap.parse('<title>Click here to select model for CRUD Operations , if unchecked Crud form are not created</title>');

//select box checked when modal form is created
var select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.rect(0, 0, 15, 15, 2, 2);
select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    x: (block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.width.animVal.value + block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value - 10),
    y: (block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value - 10),
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 2
});
select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.append(select_title_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);

//check symbol inside select box...
var tick_path_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = "M " + (select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 3) + " " + (select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 5) + "L " + (select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 7) + " " + (select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 10) + "L " + (select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.width.animVal.value) + " " + (select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value - 3);
var tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.path(tick_path_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>)
tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});

//group that attaches create form rect and tick...
var group_CreateForm_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.group(select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
//check and uncheck function on checkbox...
var checked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= model_schema[i].name%> = false;
var selectCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = function () {
    if (!checked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= model_schema[i].name%>) {
        crud_opt_group_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
            'display': 'block'
        })
        tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({ display : "block"});
        block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({ x : (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 200)});
        checked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= model_schema[i].name%> = true;
    } else if (checked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= model_schema[i].name%>) {
        crud_opt_group_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
            'display': 'none'
        })
        tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({ display : "none"});
        checked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= model_schema[i].name%> = false;
    }
};
select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.click(selectCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.click(selectCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);

//Crud Rect...
var crud_opt_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.rect(0, 0, 80, 90, 5, 5);
crud_opt_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    x: (select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 15),
    y: (select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 20),
    fill: "white",
    stroke: "#1f2c39",
    'stroke-dasharray': 10
})

//Crud options inside Crud_opt rect...
var create_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.text(0, 0, "-   create");
create_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    x: (crud_opt_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 20),
    'font-size': 15
});
var listing_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.text(0, 0, "-   Listing");
listing_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    x: (crud_opt_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 40),
    'font-size': 15
});
var update_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.text(0, 0, "-   update");
update_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    x: (crud_opt_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 60),
    'font-size': 15
});
var deleate_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.text(0, 0, "-   delete");
deleate_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    x: (crud_opt_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 80),
    'font-size': 15
});

//check and uncheck Crud options functions...
var createCheckBoxClicked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = false;
var createCheckBoxClick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = function () {
    if (!createCheckBoxClicked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>) {
        create_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
            display: "block"
        });
        createCheckBoxClicked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = true;
    } else if (createCheckBoxClicked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>) {
        create_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
            display: "none"
        });
        createCheckBoxClicked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = false;
    }
}

//listing check all three remaining options include listing , delete , edit
var listingCheckBoxClicked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = false;
var listingCheckBoxClick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = function () {
    if (!listingCheckBoxClicked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>) {
        listing_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
            display: "block"
        });
        update_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
            display: "block"
        });
        deleate_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
            display: "block"
        });
        listingCheckBoxClicked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = true;
    } else if (listingCheckBoxClicked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>) {
        listing_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
            display: "none"
        });
        update_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
            display: "none"
        });
        deleate_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
            display: "none"
        });
        listingCheckBoxClicked_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = false;
    }
}

//now set checkboxes on front of Crud operations...
var createCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.rect(0, 0, 12, 12, 1, 1);
createCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    x: (Number(create_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.attributes.x.nodeValue) + 60),
    y: (create_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
});
createCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.click(createCheckBoxClick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
var listingCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.rect(0, 0, 12, 12, 1, 1);
listingCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    x: (Number(listing_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.attributes.x.nodeValue) + 60),
    y: (listing_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
})
listingCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.click(listingCheckBoxClick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
var updateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.rect(0, 0, 12, 12, 1, 1);
updateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    x: (Number(update_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.attributes.x.nodeValue) + 60),
    y: (update_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
});
updateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.click(listingCheckBoxClick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
var deleateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.rect(0, 0, 12, 12, 1, 1);
deleateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    x: (Number(deleate_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.attributes.x.nodeValue) + 60),
    y: (deleate_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
})
deleateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.click(listingCheckBoxClick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);

//tick inside create check_box...
var create_tick_path_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j%><%= model_schema[i].name%> = "M " + (createCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 1) + " " + (createCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 6) + "L " + (createCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 5) + " " + (createCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 10) + "L " + (createCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + createCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.width.animVal.value) + " " + (createCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value - 2);
var create_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.path(create_tick_path_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
create_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.click(createCheckBoxClick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
create_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside listing check_box...
var listing_tick_path_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = "M " + (listingCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 1) + " " + (listingCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 6) + "L " + (listingCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 5) + " " + (listingCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 10) + "L " + (listingCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + listingCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.width.animVal.value) + " " + (listingCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value - 2);
var listing_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.path(listing_tick_path_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
listing_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.click(listingCheckBoxClick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
listing_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside update check_box...
var update_tick_path_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = "M " + (updateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 1) + " " + (updateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 6) + "L " + (updateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 5) + " " + (updateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 10) + "L " + (updateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + updateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.width.animVal.value) + " " + (updateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value - 2);
var update_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.path(update_tick_path_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
update_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.click(listingCheckBoxClick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
update_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside deleate check_box...
var deleate_tick_path_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = "M " + (deleateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 1) + " " + (deleateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 6) + "L " + (deleateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + 5) + " " + (deleateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 10) + "L " + (deleateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + deleateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.width.animVal.value) + " " + (deleateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value - 2);
var deleate_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.path(deleate_tick_path_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
deleate_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.click(listingCheckBoxClick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
deleate_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});

var crud_opt_group_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.group(crud_opt_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, create_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, listing_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, update_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, deleate_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, createCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, listingCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, updateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, deleateCheckBox_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, create_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, listing_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, update_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, deleate_tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
crud_opt_group_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.attr({
    'display': 'none'
})

//line toward linked model from main model...
var <%= model_schema[i].name %>To<%= hasManyThrough[j].relations.through %>Path = "M " + (block_<%= model_schema[i].name %>.node.x.animVal.value + block_<%= model_schema[i].name %>.node.width.animVal.value ) + " " + (block_<%= model_schema[i].name %>.node.y.animVal.value + 50) + "H " + (block_<%= model_schema[i].name %>.node.x.animVal.value + block_<%= model_schema[i].name %>.node.width.animVal.value + 20)+ "V " +  (block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 50) + "H " +  (block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value); 

var <%= model_schema[i].name %>To<%= hasManyThrough[j].relations.through %> = <%= model_schema[i].name %>.path(<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.through %>Path);
<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.through %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1
})
//polygon {Arrow at end of line toward linkedmodel}
var <%= model_schema[i].name %>To<%= hasManyThrough[j].relations.through %>ArrowPoints = [block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.x.animVal.value,(block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.y.animVal.value+50),(block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.x.animVal.value-10),(block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.y.animVal.value+50-10),(block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.x.animVal.value-10),(block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.y.animVal.value+50+10)];
var <%= model_schema[i].name %>To<%= hasManyThrough[j].relations.through %>Arrow = <%= model_schema[i].name %>.polygon(<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.through %>ArrowPoints);
<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.through %>Arrow.attr({
    fill: "#1f2c39",
    stroke: "#1f2c39",
    strokeWidth: 1,
});
//line toward linked model from main model...{{end}}

//line toward linked model from relation model...
var <%= hasManyThrough[j].relations.model %>To<%=hasManyThrough[j].relations.through %>Path  = "M " +(block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j%>.node.x.animVal.value) + " " + (block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j%>.node.y.animVal.value + 50) + "H " +(block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j%>.node.x.animVal.value - 20) + "V " +  (block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.y.animVal.value + 50) +"H " + (block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j%>.node.x.animVal.value - 20) + "V " + (block_<%= hasManyThrough[j].relations.through %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.y.animVal.value + 50) + "H " + (block_<%= hasManyThrough[j].relations.through %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.x.animVal.value + block_<%= hasManyThrough[j].relations.through %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.width.animVal.value);
var <%= hasManyThrough[j].relations.model %>To<%=hasManyThrough[j].relations.through %> = <%= model_schema[i].name %>.path(<%= hasManyThrough[j].relations.model %>To<%=hasManyThrough[j].relations.through %>Path);
<%= hasManyThrough[j].relations.model %>To<%=hasManyThrough[j].relations.through %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1
})
//polygon {Arrow at end of line toward linkedmodel from 2nd model
var <%= hasManyThrough[j].relations.model %>To<%=hasManyThrough[j].relations.through %>ArrowPoints = [(block_<%= hasManyThrough[j].relations.through %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.x.animVal.value + block_<%= hasManyThrough[j].relations.through %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.width.animVal.value) , (block_<%= hasManyThrough[j].relations.through %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.y.animVal.value + 50) , (block_<%= hasManyThrough[j].relations.through %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.x.animVal.value + block_<%= hasManyThrough[j].relations.through %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.width.animVal.value + 10) , (block_<%= hasManyThrough[j].relations.through %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.y.animVal.value +50 -10) , (block_<%= hasManyThrough[j].relations.through %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.x.animVal.value + block_<%= hasManyThrough[j].relations.through %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.width.animVal.value + 10) , (block_<%= hasManyThrough[j].relations.through %>_hasManyThrough<%= j%><%= model_schema[i].name%>.node.y.animVal.value + 50 + 10) ];
var <%= hasManyThrough[j].relations.model %>To<%=hasManyThrough[j].relations.through %>Arrow = <%= model_schema[i].name %>.polygon(<%= hasManyThrough[j].relations.model %>To<%=hasManyThrough[j].relations.through %>ArrowPoints);
<%= hasManyThrough[j].relations.model %>To<%=hasManyThrough[j].relations.through %>Arrow.attr({
    fill: "#1f2c39",
    stroke: "#1f2c39",
    strokeWidth: 1,
});
//line toward linked model from relation model...{{end}}

//dotted line attach relation model to main model...
var <%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>Path = "M " + (block_<%= model_schema[i].name %>.node.x.animVal.value + block_<%= model_schema[i].name %>.node.width.animVal.value ) + " " + (block_<%= model_schema[i].name %>.node.y.animVal.value + 40) + "H " + (block_<%= model_schema[i].name %>.node.x.animVal.value + block_<%= model_schema[i].name %>.node.width.animVal.value + 20) + "V " + (block_<%= model_schema[i].name%>.node.y.animVal.value -10) + "H " + (block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.x.animVal.value + block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.node.width.animVal.value + 40) + "V " + (block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 60) + "H " + (block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value);
var <%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %> = <%= model_schema[i].name %>.path(<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>Path);
<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    'stroke-dasharray' : 5
})
//polygon {Arrow at end of line toward relation model from main model...
var <%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>EndArrowPoints = [(block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value) , (block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 60), (block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value - 10) , (block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 60 - 10) , (block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value - 10) , (block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 60 + 10)];
var <%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>EndArrow = <%= model_schema[i].name %>.polygon(<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>EndArrowPoints);
<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>EndArrow.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
});
//polygon {Arrow at start of line toward relation model from main model...
var <%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>StartArrowPoints = [(block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value) ,(block_<%= model_schema[i].name%>.node.y.animVal.value + 40),(block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value +10) , (block_<%= model_schema[i].name%>.node.y.animVal.value + 40 -10),(block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value +10) , (block_<%= model_schema[i].name%>.node.y.animVal.value + 40 +10)];
var <%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>StartArrow = <%= model_schema[i].name %>.polygon(<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>StartArrowPoints);
<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>StartArrow.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
});
//dotted line attach relation model to main model...{{end}}

//relation type on top of arrow head from main model to relation model{text}...
var <%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>relationType = <%= model_schema[i].name %>.text(0, 0, "HasManyThrough");
<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>relationType.attr({
    x : (block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.x.animVal.value - 120),
    y : (block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %>.node.y.animVal.value + 40),
    stroke: "#8a8a8a",
})
//prepend relation type on top of arrow head from main model to relation model{text}......
<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>relationType.prependTo(Snap(<%= model_schema[i].name%>));

//prepend polygon...
<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>StartArrow.prependTo(Snap(<%= model_schema[i].name%>));
<%= hasManyThrough[j].relations.model %>To<%=hasManyThrough[j].relations.through %>Arrow.prependTo(Snap(<%= model_schema[i].name%>));

//now prepend all lines because these lines overlap components come after it...
<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.through %>.prependTo(Snap(<%= model_schema[i].name%>));
<%= hasManyThrough[j].relations.model %>To<%=hasManyThrough[j].relations.through %>.prependTo(Snap(<%= model_schema[i].name%>));
<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.model %>.prependTo(Snap(<%= model_schema[i].name%>));        

//add elements of link model inside a group so that they drag side by side...
var group_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> = <%= model_schema[i].name %>.group(block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> , text_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> , crud_opt_group_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> ,select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> , tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>);
<%var miny = j;
if (belongsToCounter >= 0){
    miny += belongsToCounter +1;
}if(hasManyCounter >=0 ){ 
    miny += hasManyCounter+1;        
}if(hasOneCounter >=0 ){
    miny += hasOneCounter+1;        
}
%>
<%if (miny <1 ){%>
    group_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.limitDragHasMany({ x: 0, y: 0, minx: -370, miny: -30, maxx: 400, maxy: 30 ,relateFrom :  block_<%= model_schema[i].name %>, relateTo : block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> , linkModel : block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> , textLinkModel : text_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> ,     lengthRel : <%=hasManyThrough.length%> , lineFromMainModel : <%= model_schema[i].name %>To<%= hasManyThrough[j].relations.through %>, lineFromRelationModel :  <%= hasManyThrough[j].relations.model %>To<%=hasManyThrough[j].relations.through %>,arrowFromMainModel :<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.through %>Arrow , arrowFromRelationModel : <%= hasManyThrough[j].relations.model %>To<%=hasManyThrough[j].relations.through %>Arrow , createFormChkBox : select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, createFormTick : tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> , textMainModel : text_<%= model_schema[i].name %>, textRelationModel : text_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> , tickLinkModelSelectBox :     tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> , crudOptionsLinkBox :     crud_opt_group_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>});
<%}else{%>
    group_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>.limitDragHasMany({ x: 0, y: 0, minx: -370, miny: -(<%=miny%> * 150), maxx: 400, maxy: 30 ,relateFrom :  block_<%= model_schema[i].name %>, relateTo : block_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> , linkModel : block_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> , textLinkModel : text_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> ,     lengthRel : <%=hasManyThrough.length%> , lineFromMainModel : <%= model_schema[i].name %>To<%= hasManyThrough[j].relations.through %> , lineFromRelationModel :  <%= hasManyThrough[j].relations.model %>To<%=hasManyThrough[j].relations.through %>,arrowFromMainModel :<%= model_schema[i].name %>To<%= hasManyThrough[j].relations.through %>Arrow , arrowFromRelationModel : <%= hasManyThrough[j].relations.model %>To<%=hasManyThrough[j].relations.through %>Arrow , createFormChkBox : select_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>, createFormTick : tick_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> , textMainModel : text_<%= model_schema[i].name %>, textRelationModel : text_<%= hasManyThrough[j].relations.model.toLowerCase() %>_hasManyThrough<%= j %> , tickLinkModelSelectBox :     tick_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%> , crudOptionsLinkBox :     crud_opt_group_<%= hasManyThrough[j].relations.through.toLowerCase() %>_hasManyThrough<%= j %><%= model_schema[i].name%>});
<%}%>






<%}} hasManyThroughCounter= hasManyThrough.length-1; if (hasAndBelongsToMany !=0){ for (var j=0;j< hasAndBelongsToMany.length ; j++){%>

var <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = Snap("#<%= model_schema[i].name %>");

//modal rectangle...
var drag_title_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = Snap.parse('<title>Drag and Drop here related model if exist for generate relation inside form</title>');

var block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.rect(20, 20, 150, 100, 5, 5);
block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    x: (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 570),
    width : (block_<%= model_schema[i].name%>.node.width.animVal.value),
    fill: "rgb(236, 240, 241)",
    stroke: "#1f2c39",
    strokeWidth: 1,
    'stroke-dasharray': 5 
});

<% if (j ==0 && hasManyThroughCounter >=0 ){%>
block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    y: (block_<%= hasManyThrough[hasManyThroughCounter].relations.model.toLowerCase()%>_hasManyThrough<%=hasManyThroughCounter%>.node.y.animVal.value + block_<%= hasManyThrough[hasManyThroughCounter].relations.model.toLowerCase()%>_hasManyThrough<%=hasManyThroughCounter%>.node.height.animVal.value + 20)
});
<% }if (j == 0 && hasManyThroughCounter < 0 && hasOneCounter >= 0){%>
block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    y: (block_<%= hasOne[hasOneCounter].relations.model.toLowerCase()%>_hasOne<%=hasOneCounter%>.node.y.animVal.value + block_<%= hasOne[hasOneCounter].relations.model.toLowerCase()%>_hasOne<%=hasOneCounter%>.node.height.animVal.value + 20)
});
<%} if (j ==0 && hasManyThroughCounter && hasOneCounter < 0 && hasManyCounter >= 0){%>
block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    y: (block_<%= hasMany[hasManyCounter].relations.model.toLowerCase()%>_hasMany<%=hasManyCounter%>.node.y.animVal.value + block_<%= hasMany[hasManyCounter].relations.model.toLowerCase()%>_hasMany<%=hasManyCounter%>.node.height.animVal.value + 20)
});
<%} if (j ==0 && hasManyThroughCounter && hasOneCounter < 0 && hasManyCounter < 0 && belongsToCounter >= 0){%>
block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    y: (block_<%= belongsTo[belongsToCounter].relations.model.toLowerCase()%>_belongsTo<%=belongsToCounter%>.node.y.animVal.value + block_<%= belongsTo[belongsToCounter].relations.model.toLowerCase()%>_belongsTo<%=belongsToCounter%>.node.height.animVal.value + 20)});
<%}if (j > 0){%>
block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    y: (block_<%= hasAndBelongsToMany[j-1].relations.model.toLowerCase()%>_hasAndBelongsToMany<%=j-1%>.node.y.animVal.value + block_<%= hasAndBelongsToMany[j-1].relations.model.toLowerCase()%>_hasAndBelongsToMany<%=j-1%>.node.height.animVal.value + 80)
});
<%}%>
block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.append(drag_title_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);


//modal text populate inside modal rect...
var text_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.text(0, 0, "<%= hasAndBelongsToMany[j].relations.model.toUpperCase().substring(0 , 25) %>!");
text_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    x: block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 10,
    y: block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 20,
    'font-size': 13
});


// line separates modal head and body...
var line_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.line(0, 0, 0, 0);
line_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    x1: block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value,
    y1: Number(text_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.attributes.y.nodeValue) + 5,
    x2: block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.width.animVal.value,
    y2: Number(text_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.attributes.y.nodeValue) + 5,
    stroke: "#1f2c39",
    strokeWidth: 1,
    strokeLinecap: "round"
});

// change coordinates of line and mode1_rect according to text
/*<!--block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    width: Number(text_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.attributes.x.value) + (Number(text_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.textContent.length) * 10 + 30)
});
line_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    x2: (block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.width.animVal.value + block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value)
})-->*/

//tooltip on checkbox...
var select_title_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = Snap.parse('<title>Click here to select model for CRUD Operations , if unchecked Crud form are not created</title>');

//select box checked when modal form is created
var select_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.rect(0, 0, 15, 15, 2, 2);
select_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    x: (block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.width.animVal.value + block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value - 10),
    y: (block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value - 10),
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 2
});
select_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.append(select_title_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);

//check symbol inside select box...
var tick_path_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = "M " + (select_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 3) + " " + (select_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 5) + "L " + (select_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 7) + " " + (select_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 10) + "L " + (select_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + select_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.width.animVal.value) + " " + (select_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value - 3);
var tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.path(tick_path_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>)
tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});

//check and uncheck function on checkbox...
var checked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = false;
var selectCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = function () {
    if (!checked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>) {
        crud_opt_group_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
            'display': 'block'
        })
        tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({ display : "block"});
        block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({ x : (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 570)});
        checked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = true;
    } else if (checked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>) {
        crud_opt_group_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
            'display': 'none'
        })
        tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({ display : "none"});
        checked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = false;
    }
};
select_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.click(selectCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);
tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.click(selectCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);

//Crud Rect...
var crud_opt_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.rect(0, 0, 80, 90, 5, 5);
crud_opt_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    x: (select_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 15),
    y: (select_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 20),
    fill: "white",
    stroke: "#1f2c39",
    'stroke-dasharray': 10
})

//Crud options inside Crud_opt rect...
var create_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.text(0, 0, "-   create");
create_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    x: (crud_opt_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 20),
    'font-size': 15
});
var listing_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.text(0, 0, "-   Listing");
listing_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    x: (crud_opt_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 40),
    'font-size': 15
});
var update_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.text(0, 0, "-   update");
update_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    x: (crud_opt_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 60),
    'font-size': 15
});
var deleate_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.text(0, 0, "-   delete");
deleate_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    x: (crud_opt_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 5),
    y: (crud_opt_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 80),
    'font-size': 15
});

//check and uncheck Crud options functions...
var createCheckBoxClicked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = false;
var createCheckBoxClick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = function () {
    if (!createCheckBoxClicked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>) {
        create_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
            display: "block"
        });
        createCheckBoxClicked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = true;
    } else if (createCheckBoxClicked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>) {
        create_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
            display: "none"
        });
        createCheckBoxClicked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = false;
    }
}

//listing check all three remaining options include listing , delete , edit
var listingCheckBoxClicked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = false;
var listingCheckBoxClick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = function () {
    if (!listingCheckBoxClicked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>) {
        listing_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
            display: "block"
        });
        update_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
            display: "block"
        });
        deleate_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
            display: "block"
        });
        listingCheckBoxClicked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = true;
    } else if (listingCheckBoxClicked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>) {
        listing_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
            display: "none"
        });
        update_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
            display: "none"
        });
        deleate_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
            display: "none"
        });
        listingCheckBoxClicked_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = false;
    }
}

//now set checkboxes on front of Crud operations...
var createCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.rect(0, 0, 12, 12, 1, 1);
createCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    x: (Number(create_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (create_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
});
createCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.click(createCheckBoxClick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);
var listingCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.rect(0, 0, 12, 12, 1, 1);
listingCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    x: (Number(listing_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (listing_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
})
listingCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.click(listingCheckBoxClick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);
var updateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.rect(0, 0, 12, 12, 1, 1);
updateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    x: (Number(update_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (update_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
});
updateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.click(listingCheckBoxClick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);
var deleateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.rect(0, 0, 12, 12, 1, 1);
deleateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    x: (Number(deleate_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.attributes.x.nodeValue) + 60),
    y: (deleate_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.attributes.y.nodeValue - 10),
    fill: "white",
    stroke: "#1f2c39",
})
deleateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.click(listingCheckBoxClick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);

//tick inside create check_box...
var create_tick_path_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = "M " + (createCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 1) + " " + (createCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 6) + "L " + (createCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 5) + " " + (createCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 10) + "L " + (createCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + createCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.width.animVal.value) + " " + (createCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value - 2);
var create_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.path(create_tick_path_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);
create_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.click(createCheckBoxClick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);
create_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside listing check_box...
var listing_tick_path_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = "M " + (listingCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 1) + " " + (listingCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 6) + "L " + (listingCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 5) + " " + (listingCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 10) + "L " + (listingCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + listingCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.width.animVal.value) + " " + (listingCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value - 2);
var listing_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.path(listing_tick_path_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);
listing_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.click(listingCheckBoxClick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);
listing_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside create check_box...
var update_tick_path_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = "M " + (updateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 1) + " " + (updateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 6) + "L " + (updateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 5) + " " + (updateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 10) + "L " + (updateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + updateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.width.animVal.value) + " " + (updateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value - 2);
var update_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.path(update_tick_path_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);
update_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.click(listingCheckBoxClick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);
update_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});
//tick inside create check_box...
var deleate_tick_path_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = "M " + (deleateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 1) + " " + (deleateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 6) + "L " + (deleateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + 5) + " " + (deleateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 10) + "L " + (deleateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value + deleateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.width.animVal.value) + " " + (deleateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value - 2);
var deleate_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.path(deleate_tick_path_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);
deleate_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.click(listingCheckBoxClick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);
deleate_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    display: "none"
});

var crud_opt_group_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> = <%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.group(crud_opt_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>, create_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>, listing_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>, update_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>, deleate_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>, createCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>, listingCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>, updateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>, deleateCheckBox_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>, create_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>, listing_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>, update_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>, deleate_tick_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>);
crud_opt_group_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.attr({
    'display': 'none'
})

var <%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %> = Snap("#<%= model_schema[i].name %>");

//modal rectangle...
var drag_title_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %> = Snap.parse('<title>Drag and Drop here related model if exist for generate relation inside form</title>');

var block_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %> = <%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.rect(20, 20, 150, 100, 5, 5);
block_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.attr({
    x: (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 200),
    width : (block_<%= model_schema[i].name%>.node.width.animVal.value),
    fill: "rgb(217, 202, 238)",
    stroke: "#1f2c39",
    strokeWidth: 1,
    'stroke-dasharray': 5 
});

<%if (j ==0 && hasManyThroughCounter > 0){%>
block_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.attr({
    y: (block_<%= hasManyThrough[hasManyThroughCounter].relations.model.toLowerCase()%>_hasManyThrough<%=hasManyThroughCounter%>.node.y.animVal.value + block_<%= hasManyThrough[hasManyThroughCounter].relations.model.toLowerCase()%>_hasManyThrough<%=hasManyThroughCounter%>.node.height.animVal.value + 20)
});
<%} if (j == 0 && hasManyThroughCounter < 0 && hasOneCounter >= 0){%>
block_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.attr({
    y: (block_<%= hasOne[hasOneCounter].relations.model.toLowerCase()%>_hasOne<%=hasOneCounter%>.node.y.animVal.value + block_<%= hasOne[hasOneCounter].relations.model.toLowerCase()%>_hasOne<%=hasOneCounter%>.node.height.animVal.value + 20)
});
<%} if (j ==0 && hasManyThroughCounter < 0 && hasOneCounter < 0 && hasManyCounter >= 0){%>
block_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.attr({
    y: (block_<%= hasMany[hasManyCounter].relations.model.toLowerCase()%>_hasMany<%=hasManyCounter%>.node.y.animVal.value + block_<%= hasMany[hasManyCounter].relations.model.toLowerCase()%>_hasMany<%=hasManyCounter%>.node.height.animVal.value + 20)
});
<%} if (j ==0 && hasOneCounter < 0 && hasManyThroughCounter < 0 && hasManyCounter < 0 && belongsToCounter >= 0){%>
block_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.attr({
    y: (block_<%= belongsTo[belongsToCounter].relations.model.toLowerCase()%>_belongsTo<%=belongsToCounter%>.node.y.animVal.value + block_<%= belongsTo[belongsToCounter].relations.model.toLowerCase()%>_belongsTo<%=belongsToCounter%>.node.height.animVal.value + 20)});
});
<%}if (j > 0){%>
block_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.attr({
    y: (block_<%= hasAndBelongsToMany[j-1].relations.model.toLowerCase()%>_hasAndBelongsToMany<%=j-1%>.node.y.animVal.value + block_<%= hasAndBelongsToMany[j-1].relations.model.toLowerCase()%>_hasAndBelongsToMany<%=j-1%>.node.height.animVal.value + 80)
});
<%}%>
block_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.append(drag_title_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>);

//modal text populate inside modal rect...
var text_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %> = <%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.text(0, 0, "<%= model_schema[i].name.substring(0 , 25)%><%= hasAndBelongsToMany[j].relations.model.toUpperCase().substring(0 , 25) %>!");
text_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.attr({
    x: block_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.x.animVal.value + 10,
    y: block_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.y.animVal.value + 20,
    'font-size': 13
});

//line from main model towards link model in hasAndBelongsToMany relation...
var <%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>Path = "M " + (block_<%= model_schema[i].name %>.node.x.animVal.value + block_<%= model_schema[i].name %>.node.width.animVal.value ) + " " + (block_<%= model_schema[i].name %>.node.y.animVal.value + 50) + "H " + (block_<%= model_schema[i].name %>.node.x.animVal.value + block_<%= model_schema[i].name %>.node.width.animVal.value + 20) + "V " +  (block_<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.y.animVal.value + 50) + "H " +  (block_<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.x.animVal.value);
var <%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %> = <%= model_schema[i].name %>.path(<%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>Path);
<%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1
})
//polygon {Arrow at end of line toward related model}
var <%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>ArrowPoints = [block_<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.x.animVal.value,(block_<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.y.animVal.value+50),(block_<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.x.animVal.value-10),(block_<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.y.animVal.value+50-10),(block_<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.x.animVal.value-10),(block_<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.y.animVal.value+50+10)];
var <%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>Arrow = <%= model_schema[i].name %>.polygon(<%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>ArrowPoints);
<%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>Arrow.attr({
    fill: "#1f2c39",
    stroke: "#1f2c39",
    strokeWidth: 1,
});

//line from main model towards link model in hasAndBelongsToMany relation...{{end}}

//line from relation model towards link model in hasAndBelongsToMany relation...
var <%= hasAndBelongsToMany[j].relations.model %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>Path = "M " + (block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase()%>_hasAndBelongsToMany<%= j%>.node.x.animVal.value) + " " + (block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase()%>_hasAndBelongsToMany<%= j%>.node.y.animVal.value + 50) + "H " + (block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase()%>_hasAndBelongsToMany<%= j%>.node.x.animVal.value - 20) + "V " + (block_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.y.animVal.value + 50) + "H "+ (block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.x.animVal.value + block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.width.animVal.value);
var <%= hasAndBelongsToMany[j].relations.model %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %> = <%= model_schema[i].name %>.path(<%= hasAndBelongsToMany[j].relations.model %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>Path);
<%= hasAndBelongsToMany[j].relations.model %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1
})
//polygon {Arrow at end of line toward related model}
var <%= hasAndBelongsToMany[j].relations.model %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>ArrowPoints = [(block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.x.animVal.value + block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.width.animVal.value) , (block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.y.animVal.value + 50) , (block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.x.animVal.value + block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.width.animVal.value + 10) , (block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.y.animVal.value + 50 +10) , (block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.x.animVal.value + block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.width.animVal.value + 10) , (block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.y.animVal.value + 50 - 10)];
var <%= hasAndBelongsToMany[j].relations.model %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>Arrow = <%= model_schema[i].name %>.polygon(<%= hasAndBelongsToMany[j].relations.model %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>ArrowPoints);
<%= hasAndBelongsToMany[j].relations.model %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>Arrow.attr({
    fill: "#1f2c39",
    stroke: "#1f2c39",
    strokeWidth: 1,
});
//line from relation model towards link model in hasAndBelongsToMany relation...{{end}}

//relation type on top of arrow head from main model to relation model{text}...
var <%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>relationType = <%= model_schema[i].name %>.text(0, 0, "HasAndBelongsToMany");
<%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>relationType.attr({
    x : (block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.x.animVal.value + block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.width.animVal.value + 50), 
    y : (block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.y.animVal.value + 40),
    stroke: "#8a8a8a",
})
//prepend relation type on top of arrow head from main model to relation model{text}......
<%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>relationType.prependTo(Snap(<%= model_schema[i].name%>));

//line from main model towards relation model in hasAndBelongsToMany relation...
var <%= model_schema[i].name %>To<%= hasAndBelongsToMany[j].relations.model %>Path = "M " + (block_<%= model_schema[i].name %>.node.x.animVal.value + block_<%= model_schema[i].name %>.node.width.animVal.value ) + " " + (block_<%= model_schema[i].name %>.node.y.animVal.value + 40) + "H " + (block_<%= model_schema[i].name %>.node.x.animVal.value + block_<%= model_schema[i].name %>.node.width.animVal.value + 30) + "V " + (block_<%= model_schema[i].name %>.node.y.animVal.value- 10) + "H " + (block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.x.animVal.value + block_<%= model_schema[i].name.toLowerCase() %><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.node.width.animVal.value + 40) + "V " + (block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 60) + "H " + (block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value);
var <%= model_schema[i].name %>To<%= hasAndBelongsToMany[j].relations.model %> = <%= model_schema[i].name %>.path(<%= model_schema[i].name %>To<%= hasAndBelongsToMany[j].relations.model %>Path);
<%= model_schema[i].name %>To<%= hasAndBelongsToMany[j].relations.model %>.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
    'stroke-dasharray' : 5
});
//polygon {Arrow at end of line from main model towards relation model}
var <%= model_schema[i].name %>To<%= hasAndBelongsToMany[j].relations.model %>EndArrowPoints = [(block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value) , (block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 60),(block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value - 10) , (block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 60 - 10),(block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.x.animVal.value - 10) , (block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>.node.y.animVal.value + 60 + 10)];
var <%= model_schema[i].name %>To<%= hasAndBelongsToMany[j].relations.model %>EndArrow = <%= model_schema[i].name %>.polygon(<%= model_schema[i].name %>To<%= hasAndBelongsToMany[j].relations.model %>EndArrowPoints);
<%= model_schema[i].name %>To<%= hasAndBelongsToMany[j].relations.model %>EndArrow.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
});
//polygon {Arrow at start of line from main model towards relation model}
var <%= model_schema[i].name %>To<%= hasAndBelongsToMany[j].relations.model %>StartArrowPoints = [(block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value) , (block_<%= model_schema[i].name%>.node.y.animVal.value + 40) , (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value  +10) , (block_<%= model_schema[i].name%>.node.y.animVal.value + 40 -10) , (block_<%= model_schema[i].name%>.node.x.animVal.value + block_<%= model_schema[i].name%>.node.width.animVal.value + 10) , (block_<%= model_schema[i].name%>.node.y.animVal.value + 40 + 10)];
var <%= model_schema[i].name %>To<%= hasAndBelongsToMany[j].relations.model %>StartArrow = <%= model_schema[i].name %>.polygon(<%= model_schema[i].name %>To<%= hasAndBelongsToMany[j].relations.model %>StartArrowPoints);
<%= model_schema[i].name %>To<%= hasAndBelongsToMany[j].relations.model %>StartArrow.attr({
    fill: "white",
    stroke: "#1f2c39",
    strokeWidth: 1,
});
//line from main model towards relation model in hasAndBelongsToMany relation...{{end}}

//prepend polygons...
<%= model_schema[i].name %>To<%= hasAndBelongsToMany[j].relations.model %>StartArrow.prependTo(Snap(<%= model_schema[i].name%>));

//now prepend all lines because these lines overlap components come after it...
<%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>.prependTo(Snap(<%= model_schema[i].name%>));
<%= hasAndBelongsToMany[j].relations.model %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>.prependTo(Snap(<%=model_schema[i].name%>));
<%= model_schema[i].name %>To<%= hasAndBelongsToMany[j].relations.model %>.prependTo(Snap(<%=model_schema[i].name%>));
//end...

//add elements of link model inside a group so that they drag side by side...
var group_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %> = <%= model_schema[i].name %>.group(block_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>, text_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>);

<%var miny = j;
if (belongsToCounter >= 0){
    miny += belongsToCounter +1;
}if(hasManyCounter >=0 ){ 
    miny += hasManyCounter+1;        
}if(hasOneCounter >=0 ){
    miny += hasOneCounter+1;        
}if (hasManyThroughCounter >=0){%>
    miny += hasManyThroughCounter+1;
<%}if (miny <1 ){%>
 group_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.limitDrag({ x: 0, y: 0, minx: -370, miny: -30, maxx: 400, maxy: 30 , relateFrom :  block_<%= model_schema[i].name %>, relateTo :block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> , linkModel : block_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %> , textLinkModel : text_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %> , lengthRel : <%=hasAndBelongsToMany.length%> , lineFromMainModel : <%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>, lineFromRelationModel : <%= hasAndBelongsToMany[j].relations.model %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>, arrowFromMainModel : <%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>Arrow , arrowFromRelationModel :<%= hasAndBelongsToMany[j].relations.model %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>Arrow , textMainModel : text_<%= model_schema[i].name %>, textRelationModel : text_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>});
<%}else{%>
group_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>.limitDrag({ x: 0, y: 0, minx: -370, miny: -(<%=miny%> * 150), maxx: 400, maxy: 30 , relateFrom :  block_<%= model_schema[i].name %>, relateTo :block_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %> , linkModel : block_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %> , textLinkModel : text_<%= model_schema[i].name%><%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>, lengthRel : <%=hasAndBelongsToMany.length%> , lineFromMainModel : <%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>, lineFromRelationModel : <%= hasAndBelongsToMany[j].relations.model %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>, arrowFromMainModel : <%= model_schema[i].name %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>Arrow , arrowFromRelationModel :<%= hasAndBelongsToMany[j].relations.model %>To<%= model_schema[i].name %><%= hasAndBelongsToMany[j].relations.model %>Arrow  , textMainModel : text_<%= model_schema[i].name %>, textRelationModel : text_<%= hasAndBelongsToMany[j].relations.model.toLowerCase() %>_hasAndBelongsToMany<%= j %>});
<%}}}}%>

var roles = new Array();
//deny all operations for roles {ACLS}
$.get("http://localhost:3000/api/Roles", function( data ) {
    data.push({
        "name" : "$everyone",
        "description" : "Loopback default role"
    },{
        "name" : "$owner",
        "description" : "Loopback default role"
    },{
        "name" : "$authenticated",
        "description" : "Loopback default role"
    },{
        "name" : "$unauthenticated",
        "description" : "Loopback default role"
    });
    roles = data;
   /*for(var i=0; i < relationSchema.length ; i++){
        for(var j=0 ; j < roles.length ; j++){
            if (roles[j].name == "$everyone"){
                relationSchema[i].ACL.push({
                    "principalType": "ROLE",
                    "principalId": roles[j].name,
                    "permission": "DENY"
                });
            }
        }
    }*/
});

//function createSchema generate schema file on server side...
function createSchema(){
    
    schema = relationSchema;
    for (var i=0 ; i< schema.length ; i++){
        for (var j=0 ; j < schema.length; j++){
            if (schema[j].relations.length >0){
                for (var k=0 ; k < schema[j].relations.length;k++){
                    if (schema[i].modelName ==schema[j].relations[k].modelName){
                        schema[i].operations.createOperation =false;
                    }
                }
            }
        }
    }    console.log(relationSchema);
    
    
    schema = JSON.stringify(schema);
    $.post("http://localhost:3000/save_schema",{schema : schema}, function(response){
    console.log(response)
    });
}

//function called on model doubleClick and displays property and ACL's panel...
function displayPropPanel(modelName){
    $("#infoi").css("display", "block");                                //=> display properties panel
    $("#roleTable").find("tr:gt(0)").remove();                          //=> remove all roles from table
    $('#aclSelectRole').html('');
    roles.forEach(function(role) {
        $('#roleTable tr:last').after("<tr> <td>" + role.name + "</td> <td>" + role.description + "</td></tr>");    
        $('#aclSelectRole').append('<option value=' + role.name + '>' + role.name+ '</option>');         
    });
    $("#propTable").find("tr:gt(0)").remove();                          //=> remove all properties from table
    var modelProperties = this[modelName + 'Properties'];                
    for (prop in modelProperties) {                                     //=>create rows inside properties panel dynamically
        $('#propTable tr:last').after("<tr onclick='setfieldProperties(\"" + prop + "\",\"" + modelName + "\")'> <td>" + prop + "</td> <td>" + modelProperties[prop].type + "</td></tr>");        
    }
}

var selectedModelName , selectedPropertyName;

//set field properties...
function setfieldProperties(propertyName , modelName) {
    selectedModelName = modelName; selectedPropertyName = propertyName;
    $("#propertySetting").css('display', 'block');
    $("#propertySettingHeading").text(propertyName);

    //empty fields after submit info...
    $('#modal_prop_label').val('');
    $("option[name='defaultRequired']").prop('selected',true);
    $('#modal_prop_placeholder').val('');
    $('#modal_prop_pattern').val('');
    $('#modal_prop_min').val('');
    $('#modal_prop_max').val('');
    $('#modal_prop_title').val('');
};

//save model properties details...
function saveProperties(){    
    var modelProperties = {
        "required" : false, 
        "label" : $('#modal_prop_label').val(),
        "type" : $( "#modal_prop_type option:selected" ).text(),
        "placeholder" : $('#modal_prop_placeholder').val(),
        "pattern" : $('#modal_prop_pattern').val(),
        "min" : $('#modal_prop_min').val(),
        "max" : $('#modal_prop_max').val(),
        "title" : $('#modal_prop_title').val(),
        
    };
    if ($('#modal_prop_required').is(":checked")){
        modelProperties.required = true;
    }
    if (Number($("#modal_prop_max").val()) < Number($("#modal_prop_min").val()) && $("#modal_prop_max").val() != "")
        modelProperties.max = $("#modal_prop_min").val();


    //push properties data in relationSchema array...
    for (var i=0 ; i < relationSchema.length ; i++){
        if (relationSchema[i].modelName == selectedModelName){
            for (var j=0 ; j< relationSchema[i].properties.length ; j++){
                if (relationSchema[i].properties[j].field == selectedPropertyName){
                    relationSchema[i].properties[j].required = modelProperties.required;
                    relationSchema[i].properties[j].label = modelProperties.label;
                    relationSchema[i].properties[j].type = modelProperties.type;
                    relationSchema[i].properties[j].placeholder = modelProperties.placeholder;
                    relationSchema[i].properties[j].pattern = modelProperties.pattern;
                    relationSchema[i].properties[j].min = modelProperties.min;
                    relationSchema[i].properties[j].max = modelProperties.max;
                    relationSchema[i].properties[j].title = modelProperties.title;
                }
            }
        }
    }

    //empty fields after submit info...
    $('#modal_prop_label').val('');
    $("option[name='defaultRequired']").prop('selected',true);
    $('#modal_prop_placeholder').val('');
    $('#modal_prop_pattern').val('');
    $('#modal_prop_min').val('');
    $('#modal_prop_max').val('');
    $('#modal_prop_title').val('');
}

//add ACL to models...
function addPermission(modelName){
    var aclSelectedRole = $( "#aclSelectRole option:selected" ).text();
    var view = add = deleate = update = relationsOpt = false;
    if ($('#idView').is(":checked")) view = true;
    if ($('#idAdd').is(":checked")) add=true;
    if ($('#idUpdate').is(":checked")) update = true;
    if ($('#idDelete').is(":checked")) deleate = true;
    if ($('#idRelations').is(":checked")) relationsOpt = true;

    var relBelongsTo = [], relHasOne = [], relHasMany =[], relHasManyThrough =[], relHasAndBelongsToMany =[];

    for (var j=0 ; j< model_schema.length; j++){            
        if (model_schema[j].name.toLowerCase() == modelName.toLowerCase()){  
            for (var rel in model_schema[j].relations) {
                if (model_schema[j].relations[rel].type == 'belongsTo'){
                    relBelongsTo.push({
                        "belongsTo" : true,
                        "relation" : model_schema[j].relations[rel].model,
                        "model" : model_schema[j].name
                    });
                }
                if (model_schema[j].relations[rel].type == 'hasOne'){
                    relHasOne.push({
                        "hasOne" : true,
                        "relation" : model_schema[j].relations[rel].model,
                        "model" : model_schema[j].name
                    });
                }
                if (model_schema[j].relations[rel].type == 'hasMany'){
                    relHasMany.push({
                        "hasMany" : true,
                        "relation" : model_schema[j].relations[rel].model,
                        "model" : model_schema[j].name
                    });
                }
                if (model_schema[j].relations[rel].type == 'hasManyThrough'){
                    relHasManyThrough.push({
                        "hasManyThrough" : true,
                        "relation" : model_schema[j].relations[rel].model,
                        "model" : model_schema[j].name
                    });
                }
                if (model_schema[j].relations[rel].type == 'hasAndBelongsToMany'){
                    relHasAndBelongsToMany = true;
                    relHasAndBelongsToMany.push({
                        "hasAndBelongsToMany" : true,
                        "relation" : model_schema[j].relations[rel].model,
                        "model" : model_schema[j].name
                    });
                }
            }
        }
    }

    //view checked...
    if (view){                                         //=> push acl in array in relationSchema
        for (var i=0 ; i< relationSchema.length ; i++){ 
            if(relationSchema[i].modelName == modelName){
                relationSchema[i].ACL.push({
                    "principalType": "ROLE",
                    "principalId": aclSelectedRole,
                    "permission": "ALLOW",
                    "property": "findById"
                },{
                    "principalType": "ROLE",
                    "principalId": aclSelectedRole,
                    "permission": "ALLOW",
                    "property": "find"
                });
            }
        }
    }else{
        for(var i=0; i < relationSchema.length ; i++){
            if(relationSchema[i].modelName == modelName){                
                for(var j=0 ; j < relationSchema[i].ACL.length ; j++){
                    if ((relationSchema[i].ACL[j].property == 'find' || relationSchema[i].ACL[j].property == 'findById') && relationSchema[i].ACL[j].principalId == aclSelectedRole){
                        relationSchema[i].ACL.splice(j, 1);
                    }
                }
                relationSchema[i].ACL.push({
                    "principalType": "ROLE",
                    "principalId": aclSelectedRole,
                    "permission": "DENY",
                    "property": "findById"
                },{
                    "principalType": "ROLE",
                    "principalId": aclSelectedRole,
                    "permission": "DENY",
                    "property": "find"
                });
            }
        }
    }

    //add Checked...
    if (add){                                         //=> push acl in array in relationSchema
        for (var i=0 ; i< relationSchema.length ; i++){ 
            if(relationSchema[i].modelName == modelName){
                relationSchema[i].ACL.push({
                    "principalType": "ROLE",
                    "principalId": aclSelectedRole,
                    "permission": "ALLOW",
                    "property": "create"
                },{
                    "principalType": "ROLE",
                    "principalId": aclSelectedRole,
                    "permission": "ALLOW",
                    "property": "replaceOrCreate"
                },{
                    "principalType": "ROLE",
                    "principalId": aclSelectedRole,
                    "permission": "ALLOW",
                    "property": "updateOrCreate"
                });
            }
        }
    }else{
        for(var i=0; i < relationSchema.length ; i++){
            if(relationSchema[i].modelName == modelName){                
                for(var j=0 ; j < relationSchema[i].ACL.length ; j++){
                    if ((relationSchema[i].ACL[j].property == 'create' || relationSchema[i].ACL[j].property == 'replaceOrCreate' || relationSchema[i].ACL[j].property == 'updateOrCreate') && relationSchema[i].ACL[j].principalId == aclSelectedRole){
                        relationSchema[i].ACL.splice(j, 1);
                    }
                }
                relationSchema[i].ACL.push({
                    "principalType": "ROLE",
                    "principalId": aclSelectedRole,
                    "permission": "DENY",
                    "property": "create"
                },{
                    "principalType": "ROLE",
                    "principalId": aclSelectedRole,
                    "permission": "DENY",
                    "property": "replaceOrCreate"
                },{
                    "principalType": "ROLE",
                    "principalId": aclSelectedRole,
                    "permission": "DENY",
                    "property": "updateOrCreate"
                });
            }
        }
    }

    //update Checked...
    if (update){                                     //=> push acl in array in relationSchema
        for (var i=0 ; i< relationSchema.length ; i++){ 
            if(relationSchema[i].modelName == modelName){
                relationSchema[i].ACL.push({
                    "principalType": "ROLE",
                    "principalId": aclSelectedRole,
                    "permission": "ALLOW",
                    "property": "updateById"
                });
            }
        }
    }else{
        for(var i=0; i < relationSchema.length ; i++){
            if(relationSchema[i].modelName == modelName){                
                for(var j=0 ; j < relationSchema[i].ACL.length ; j++){
                    if (relationSchema[i].ACL[j].property == 'updateById' && relationSchema[i].ACL[j].principalId == aclSelectedRole){
                        relationSchema[i].ACL.splice(j, 1);
                    }
                }
                relationSchema[i].ACL.push({
                    "principalType": "ROLE",
                    "principalId": aclSelectedRole,
                    "permission": "DENY",
                    "property": "updateById"
                });
            }
        }
    }

    //delete Checked...
    if (deleate){                                      //=> push acl in array in relationSchema
        for (var i=0 ; i< relationSchema.length ; i++){ 
            if(relationSchema[i].modelName == modelName){
                relationSchema[i].ACL.push({
                    "principalType": "ROLE",
                    "principalId": aclSelectedRole,
                    "permission": "ALLOW",
                    "property": "deleteById"
                });
            }
        }
    }else{
        for(var i=0; i < relationSchema.length ; i++){
            if(relationSchema[i].modelName == modelName){                
                for(var j=0 ; j < relationSchema[i].ACL.length ; j++){
                    if (relationSchema[i].ACL[j].property == 'deleteById' && relationSchema[i].ACL[j].principalId == aclSelectedRole){
                        relationSchema[i].ACL.splice(j, 1);
                    }
                }
                relationSchema[i].ACL.push({
                    "principalType": "ROLE",
                    "principalId": aclSelectedRole,
                    "permission": "DENY",
                    "property": "deleteById"
                });
            }
        }
    }
    /*//relations operations...
    if (relationsOpt){     //=> push acl in array in relationSchema
        for (var i=0 ; i< relationSchema.length ; i++){ 
            if(relationSchema[i].modelName == modelName){
                for (var j= 0; j< relBelongsTo.length ; j++){
                    if  (relBelongsTo[j].model == modelName){
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__get__" + relBelongsTo[j].relation
                        }); 
                    }
                } 
                for (var j =0 ; j < relHasOne.length ; j++){
                    if (relHasOne[j].model == modelName){
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__create__" + relHasOne[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__get__" + relHasOne[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__update__" + relHasOne[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__destroy__" + relHasOne[j].relation
                        });
                    }
                }
                for (var j =0 ; j < relHasMany.length ; j++){
                    if (relHasMany[j].model == modelName){
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__create__" + relHasMany[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__get__" + relHasMany[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__count__" + relHasMany[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": " __findById__" + relHasMany[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__destroyById__" + relHasMany[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__delete__" + relHasMany[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__updateById__" + relHasMany[j].relations
                        });
                    }
                }
                for (var j =0 ; j < relHasManyThrough.length ; j++){
                    if (relHasManyThrough[j].model == modelName){
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__link__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__exists__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__unlink__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__create__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__get__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__count__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": " __findById__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__destroyById__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__delete__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__updateById__" + relHasManyThrough[j].relation
                        });
                    }
                }
                for (var j =0 ; j < relHasAndBelongsToMany.length ; j++){
                    if (relHasAndBelongsToMany[j].model == modelName){
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__link__" + relHasAndBelongsToMany[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "ALLOW",
                            "property": "__unlink__" + relHasAndBelongsToMany[j].relation
                        });
                    }
                }
            }
        }
    }else{
        for(var i=0; i < relationSchema.length ; i++){
            if(relationSchema[i].modelName == modelName){                
                for(var j=0 ; j < relationSchema[i].ACL.length ; j++){
                    for (var k=0 ; k< model_schema.length; k++){
                        if (model_schema[k].name.toLowerCase() == relationSchema[i].modelName.toLowerCase()){            
                            if (relationSchema[i].ACL[j].property == '__get__'+model_schema[k].relations.model && relationSchema[i].ACL[j].principalId == aclSelectedRole){     
                                relationSchema[i].ACL.splice(j, 1);                                
                            }  
                            if ((relationSchema[i].ACL[j].property == '__create__'+model_schema[k].relations.model || relationSchema[i].ACL[j].property == '__get__'+model_schema[k].relations.model ||relationSchema[i].ACL[j].property == '__update__'+model_schema[k].relations.model || relationSchema[i].ACL[j].property == '__destroy__'+model_schema[k].relations.model )&& relationSchema[i].ACL[j].principalId == aclSelectedRole){     
                                relationSchema[i].ACL.splice(j, 1);                                
                            }  
                            if ((relationSchema[i].ACL[j].property == '__count__'+model_schema[k].relations.model ||relationSchema[i].ACL[j].property == '__create__'+model_schema[k].relations.model || relationSchema[i].ACL[j].property == '__get__'+model_schema[k].relations.model ||relationSchema[i].ACL[j].property == '__updateById__'+model_schema[k].relations.model || relationSchema[i].ACL[j].property == '__destroyById__'+model_schema[k].relations.model || relationSchema[i].ACL[j].property == '__delete__'+model_schema[k].relations.model|| relationSchema[i].ACL[j].property == '__findById__'+model_schema[k].relations.model )&& relationSchema[i].ACL[j].principalId == aclSelectedRole){     
                                relationSchema[i].ACL.splice(j, 1);                                
                            }      
                            if ((relationSchema[i].ACL[j].property == '__count__'+model_schema[k].relations.model || relationSchema[i].ACL[j].property == '__create__'+model_schema[k].relations.model || relationSchema[i].ACL[j].property == '__get__'+model_schema[k].relations.model || relationSchema[i].ACL[j].property == '__updateById__'+model_schema[k].relations.model || relationSchema[i].ACL[j].property == '__destroyById__'+model_schema[k].relations.model || relationSchema[i].ACL[j].property == '__delete__'+model_schema[k].relations.model || relationSchema[i].ACL[j].property == '__findById__'+model_schema[k].relations.model || relationSchema[i].ACL[j].property == '__exists__'+model_schema[k].relations.model ||relationSchema[i].ACL[j].property == '__link__'+model_schema[k].relations.model ||relationSchema[i].ACL[j].property == '__unlink__'+model_schema[k].relations.model) && relationSchema[i].ACL[j].principalId == aclSelectedRole){     
                                relationSchema[i].ACL.splice(j, 1);
                            } 
                            if ((relationSchema[i].ACL[j].property == '__link__'+model_schema[k].relations.model  || relationSchema[i].ACL[j].property == '__unlink__'+model_schema[k].relations.model )&& relationSchema[i].ACL[j].principalId == aclSelectedRole){     
                                relationSchema[i].ACL.splice(j, 1);
                            }                 
                        }
                    }
                }
                for (var j= 0; j< relBelongsTo.length ; j++){
                    if  (relBelongsTo[j].model == modelName){
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__get__" + relBelongsTo[j].relation
                        }); 
                    }
                } 
                for (var j =0 ; j < relHasOne.length ; j++){
                    if (relHasOne[j].model == modelName){
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__create__" + relHasOne[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__get__" + relHasOne[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__update__" + relHasOne[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__destroy__" + relHasOne[j].relation
                        });
                    }
                }
                for (var j =0 ; j < relHasMany.length ; j++){
                    console.log(relHasMany[j] == modelName);
                    if (relHasMany[j].model == modelName){
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__create__" + relHasMany[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__get__" + relHasMany[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__count__" + relHasMany[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": " __findById__" + relHasMany[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__destroyById__" + relHasMany[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__delete__" + relHasMany[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__updateById__" + relHasMany[j].relations
                        });
                    }
                }
                for (var j =0 ; j < relHasManyThrough.length ; j++){
                    if (relHasManyThrough[j].model == modelName){
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__link__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__exists__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__unlink__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__create__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__get__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__count__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": " __findById__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__destroyById__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__delete__" + relHasManyThrough[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__updateById__" + relHasManyThrough[j].relation
                        });
                    }
                }
                for (var j =0 ; j < relHasAndBelongsToMany.length ; j++){
                    if (relHasAndBelongsToMany[j].model == modelName){
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__link__" + relHasAndBelongsToMany[j].relation
                        });
                        relationSchema[i].ACL.push({
                            "principalType": "ROLE",
                            "principalId": aclSelectedRole,
                            "permission": "DENY",
                            "property": "__unlink__" + relHasAndBelongsToMany[j].relation
                        });
                    }
                }
            }
        }
    }*/
}